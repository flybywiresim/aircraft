<!-- Copyright (c) 2022 FlyByWire Simulations -->
<!-- SPDX-License-Identifier: GPL-3.0 -->

<ModelBehaviors>
    <Template Name="FBW_HANDLING_Lever_With_Button_Flaps_Template">
        <DefaultTemplateParameters>
            <ANIM_NAME_LEVER>HANDLING_Lever_Flaps</ANIM_NAME_LEVER>
            <ANIM_TRIGGER_COUNT>1</ANIM_TRIGGER_COUNT>
            <NODE_ID>HANDLING_Lever_Flaps</NODE_ID>
            <PART_ID>HANDLING_Lever_Flaps</PART_ID>
            <ANIM_NAME_BUTTON>HANDLING_Lever_Button_Flaps</ANIM_NAME_BUTTON>
            <ANIM_SPEED>5</ANIM_SPEED>
            <DRAG_DELTA>0.1</DRAG_DELTA>
            <ANIMREF_ID>1</ANIMREF_ID>
            <ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
            <ANIMTIP_1_ON_PERCENT>0.5</ANIMTIP_1_ON_PERCENT>
            <ANIMTIP_2_ON_PERCENT>1</ANIMTIP_2_ON_PERCENT>
            <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_UP</ANIMTIP_0>
            <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_TO</ANIMTIP_1>
            <ANIMTIP_2>TT:COCKPIT.TOOLTIPS.FLAPS_LEVER_LDG</ANIMTIP_2>
            <AXIS>Y</AXIS>
            <Condition Check="USE_TRAJECTORY_DRAG_MODE">
                <True>
                    <MAX_HANDLE_INDEX>4</MAX_HANDLE_INDEX>
                    <MIN_DELTA>0.25</MIN_DELTA>
                </True>
                <False>
                    <DELTA_MIN>0.001</DELTA_MIN>
                    <MIN_DELTA_FOR_POS_CHANGE>0.05</MIN_DELTA_FOR_POS_CHANGE>
                </False>
            </Condition>
            <DONT_CREATE_SOUND_ANIM_TRIGGERS/>
        </DefaultTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Anim_Code">
                <ANIM_NAME>#ANIM_NAME_BUTTON#</ANIM_NAME>
                <ANIM_CODE>
                    (O:XMLVAR_Interacting_With_Lever) 100 *
                </ANIM_CODE>
                <Condition Check="BUTTON_ANIM_LAG">
                    <ANIM_LAG>#BUTTON_ANIM_LAG#</ANIM_LAG>
                </Condition>
                <ANIM_LENGTH>100</ANIM_LENGTH>
            </UseTemplate>

            <UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
                <DRAG_ANIM_NAME>#ANIM_NAME_LEVER#</DRAG_ANIM_NAME>
                <Condition Check="DRAG_ANIM_LAG">
                    <ANIM_LAG>#DRAG_ANIM_LAG#</ANIM_LAG>
                </Condition>
                <NO_ARROWS/>
                <ANIM_NAME>#ANIM_NAME_LEVER#</ANIM_NAME>
                <CURSOR>Grab</CURSOR>
                <HELPID>HELPID_GAUGE_FLAPS_SWITCH</HELPID>
                <TOOLTIPID>TOOLTIPTEXT_FLAPS_SWITCH</TOOLTIPID>
                <DRAG_SIMVAR>L:A32NX_FLAPS_HANDLE_PERCENT</DRAG_SIMVAR>
                <ANIM_CODE>(L:A32NX_FLAPS_HANDLE_PERCENT, number) 100 *</ANIM_CODE>
                <DRAG_CODE>
                    (M:DragPercent) sp0
                    (L:A32NX_FLAPS_HANDLE_INDEX, number) 4 / sp1
                    l0 l1 - sp2
                    l2 abs #MIN_DELTA# &gt; if{
                        l2 0 &gt; if{
                            (&gt;K:FLAPS_INCR)
                        } els{
                            (&gt;K:FLAPS_DECR)
                        }
                    }
                </DRAG_CODE>
                <DOWN_CODE>1 (&gt;O:XMLVAR_Interacting_With_Lever)</DOWN_CODE>
                <RELEASE_CODE>0 (&gt;O:XMLVAR_Interacting_With_Lever)</RELEASE_CODE>
                <POSITIVE_AXIS_CODE>(&gt;K:FLAPS_DECR)</POSITIVE_AXIS_CODE>
                <NEGATIVE_AXIS_CODE>(&gt;K:FLAPS_INCR)</NEGATIVE_AXIS_CODE>
            </UseTemplate>

            <UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
                <WWISE_EVENT>flapcover</WWISE_EVENT>
                <COUNT>#ANIM_TRIGGER_COUNT#</COUNT>
                <ANIM_NAME>#ANIM_NAME_LEVER#</ANIM_NAME>
            </UseTemplate>

            <UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
                <ANIM_NAME>#ANIM_NAME_BUTTON#</ANIM_NAME>
                <WWISE_EVENT_1>flapcover</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <DIRECTION_1>Forward</DIRECTION_1>
                <WWISE_EVENT_2>flapcover</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.9</NORMALIZED_TIME_2>
                <DIRECTION_2>Backward</DIRECTION_2>
            </UseTemplate>

            <UseTemplate Name="ASOBO_GT_Visibility_Code">
                <VISIBILITY_CODE>(L:XMLVAR_LeverFlapsHidden) !</VISIBILITY_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_HANDLING_Lever_Spoilers_Template">
        <DefaultTemplateParameters>
            <ANIM_NAME>HANDLING_Lever_Spoilers</ANIM_NAME>
            <ANIM_TRIGGER_COUNT>3</ANIM_TRIGGER_COUNT>
            <NODE_ID>HANDLING_Lever_Spoilers</NODE_ID>
            <PART_ID>HANDLING_Lever_Spoilers</PART_ID>
            <STEPS_NUMBER>2</STEPS_NUMBER>
            <IGNORE_GATE>2</IGNORE_GATE>
            <DRAG_SPEED>30</DRAG_SPEED>
            <POSITION_TYPE>O</POSITION_TYPE>
            <POSITION_VAR>Position</POSITION_VAR>
            <EVENT_SPEED Process="Float">16383 10 /</EVENT_SPEED>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.SPEEDBRAKE_LEVER</TOOLTIPID>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <ARMED_POSITION_INVERSION></ARMED_POSITION_INVERSION>
            <RETRACT_POSITION>1</RETRACT_POSITION>
            <ARMED_POSITION>0</ARMED_POSITION>
        </OverrideTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Update">
                <FREQUENCY>30</FREQUENCY>
                <UPDATE_CODE>
                    (L:A32NX_SPOILERS_ARMED, Bool) if{
                        0 (&gt;#POSITION_TYPE#:#POSITION_VAR#)
                    } els{
                        1 (L:A32NX_SPOILERS_HANDLE_POSITION, Number) #STEPS_NUMBER# * + (&gt;#POSITION_TYPE#:#POSITION_VAR#)
                    }
                </UPDATE_CODE>
            </UseTemplate>
            <UseTemplate Name="ASOBO_GT_Lever_DraggingYAxis_Gates">
                <USE_TRAJECTORY_DRAG_MODE>True</USE_TRAJECTORY_DRAG_MODE>
                <GATE_DIRECTION>0</GATE_DIRECTION>
                <WWISE_EVENT_1>lever_speedbrakes</WWISE_EVENT_1>
                <WWISE_EVENT_2>lever_speedbrakes</WWISE_EVENT_2>
                <DONT_SYNC_DRAG_TO_ANIM>True</DONT_SYNC_DRAG_TO_ANIM>
                <DRAG_CODE>
                    (#POSITION_TYPE#:#POSITION_VAR#) 1 &lt;= if{
                        (M:DragPercent) (O:PrevDragPercent) - 0 &gt; sp0
                        (M:DragPercent) 0 != (M:DragPercent) 0.33 &gt; (M:InputType) 0 == l0 or ? #ARMED_POSITION_INVERSION# if{
                            #RETRACT_POSITION# (&gt;#POSITION_TYPE#:#POSITION_VAR#)
                            (&gt;K:SPOILERS_ARM_OFF)
                            0 (&gt;K:SPOILERS_SET)
                        } els{
                            (M:DragPercent) 0 == (M:DragPercent) 0.33 &lt; (M:InputType) 0 == l0 ! and ? #ARMED_POSITION_INVERSION# if{
                                #ARMED_POSITION# (&gt;#POSITION_TYPE#:#POSITION_VAR#)
                                (&gt;K:SPOILERS_ARM_ON)
                                0 (&gt;K:SPOILERS_SET)
                            }
                        }
                    } els{
                        (#POSITION_TYPE#:#POSITION_VAR#) 1 - #STEPS_NUMBER# / 16384 * (&gt;K:SPOILERS_SET)
                    }
                </DRAG_CODE>
                <STEPS_NUMBER Process="Int">#STEPS_NUMBER# 1 +</STEPS_NUMBER>
            </UseTemplate>
            <UseTemplate Name="ASOBO_GT_AnimTriggers_SoundEvents_Same">
                <WWISE_EVENT>lever_speedbrakes</WWISE_EVENT>
                <COUNT>#ANIM_TRIGGER_COUNT#</COUNT>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_LANDING_GEAR_Switch_ParkingBrake_Template">
        <DefaultTemplateParameters>
            <ANIM_DELAY>0</ANIM_DELAY>
            <Condition Check="USE_DRAGGING_INTERACTION">
                <ANIM_SPEED>100</ANIM_SPEED>
            </Condition>
        </DefaultTemplateParameters>
        <UseTemplate Name="FBW_LANDING_GEAR_Switch_ParkingBrake_SubTemplate">
        </UseTemplate>
    </Template>

    <Template Name="FBW_LANDING_GEAR_Switch_ParkingBrake_SubTemplate">
        <DefaultTemplateParameters>
            <ANIM_NAME>LANDING_GEAR_Switch_ParkingBrake</ANIM_NAME>
            <NODE_ID>LANDING_GEAR_Switch_ParkingBrake</NODE_ID>
            <PART_ID>LANDING_GEAR_Switch_ParkingBrake</PART_ID>
            <Condition Check="USE_DRAGGING_INTERACTION">
                <DRAG_SPEED>5</DRAG_SPEED>
                <ANIM_LENGTH>100</ANIM_LENGTH>
                <DELTA_MIN>0.00025</DELTA_MIN>
                <ANIM_DELTA>#ANIM_SPEED# (O:Delta_SIMULATION_TIME) * (O:Delta_ANIM_POS) abs min</ANIM_DELTA>
            </Condition>
            <UPDATE_CODE>
                (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (O:BrakeIsON) != if{
                    (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (&gt;O:BrakeIsON)
                    (L:A32NX_PARK_BRAKE_LEVER_POS, bool) ! if{
                        (L:A32NX_PARK_BRAKE_LEVER_POS, bool) 100 * (&gt;O:BrakePosition)
                    } els{
                        (E:SIMULATION TIME, second) #ANIM_DELAY# + (&gt;O:BrakeStartingTime)
                    }
                }
                els{
                    (O:BrakeStartingTime) 0 &gt; if{
                        (E:SIMULATION TIME, second) (O:BrakeStartingTime) - 0 &gt; if{
                            (L:A32NX_PARK_BRAKE_LEVER_POS, bool) 100 * (&gt;O:BrakePosition)
                            0 (&gt;O:BrakeStartingTime)
                        }
                    }
                }
            </UPDATE_CODE>
            <Condition Check="USE_DRAGGING_INTERACTION">
                <False>
                    <MOUSEFLAGS>LeftSingle+WheelUp+WheelDown</MOUSEFLAGS>
                    <Condition>
                        <Test>
                            <Greater>
                                <Value>ANIM_DELAY</Value>
                                <Number>0</Number>
                            </Greater>
                        </Test>
                        <True>
                            <LEFT_SINGLE_CODE>
                                (&gt;K:PARKING_BRAKES)
                                (L:A32NX_PARK_BRAKE_LEVER_POS, bool) ! if{
                                    (L:A32NX_PARK_BRAKE_LEVER_POS, bool) 100 * (&gt;O:BrakePosition)
                                    (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (&gt;O:BrakeIsON)
                                }
                            </LEFT_SINGLE_CODE>
                            <ANIM_CODE>(O:BrakePosition)</ANIM_CODE>
                        </True>
                        <False>
                            <LEFT_SINGLE_CODE>(&gt;K:PARKING_BRAKES)</LEFT_SINGLE_CODE>
                            <ANIM_CODE>(L:A32NX_PARK_BRAKE_LEVER_POS, bool) 100 *</ANIM_CODE>
                        </False>
                    </Condition>
                    <Condition Valid="INVERT_MOUSEWHEEL_INTERACTION">
                        <True>
                            <CLOCKWISE_CODE>(L:A32NX_PARK_BRAKE_LEVER_POS, bool) ! if{ (&gt;K:PARKING_BRAKES) }</CLOCKWISE_CODE>
                            <ANTICLOCKWISE_CODE>(L:A32NX_PARK_BRAKE_LEVER_POS, bool) if{ (&gt;K:PARKING_BRAKES) }</ANTICLOCKWISE_CODE>
                        </True>
                        <False>
                            <CLOCKWISE_CODE>(L:A32NX_PARK_BRAKE_LEVER_POS, bool) if{ (&gt;K:PARKING_BRAKES) }</CLOCKWISE_CODE>
                            <ANTICLOCKWISE_CODE>(L:A32NX_PARK_BRAKE_LEVER_POS, bool) ! if{ (&gt;K:PARKING_BRAKES) }</ANTICLOCKWISE_CODE>
                        </False>
                    </Condition>
                </False>
            </Condition>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.PARKBRAKE_GENERIC</TOOLTIPID>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <Condition Check="USE_DRAGGING_INTERACTION">
                <False>
                    <LEFT_SINGLE_CODE>
                        (M:Event) 'WheelUp'    scmi 0 == if{ #CLOCKWISE_CODE# } els{
                        (M:Event) 'WheelDown'  scmi 0 == if{ #ANTICLOCKWISE_CODE# } els{
                            #LEFT_SINGLE_CODE#
                        }
                        }
                    </LEFT_SINGLE_CODE>
                </False>
            </Condition>
        </OverrideTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <Switch>
                <Case Check="USE_PEDAL_AS_SWITCH">
                    <UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
                        <HELPID>HELPID_GAUGE_PARKING_BRAKE</HELPID>
                        <TOOLTIPID>TOOLTIPTEXT_PARKING_BRAKE</TOOLTIPID>
                        <WWISE_EVENT_1>parkbrk</WWISE_EVENT_1>
                        <WWISE_EVENT_2>parkbrk</WWISE_EVENT_2>
                    </UseTemplate>
                </Case>
                <Case Check="USE_DRAGGING_INTERACTION">
                    <Update Fraquency="0.1">
                        (O:IsInit) ! if{
                            1 (&gt;O:IsInit)
                            (L:A32NX_PARK_BRAKE_LEVER_POS, bool) 100 * (&gt;O:BrakePosition)
                        }
                    </Update>
                    <Condition>
                        <Test>
                            <Greater>
                                <Value>ANIM_DELAY</Value>
                                <Number>0</Number>
                            </Greater>
                        </Test>
                        <True>
                            <Update Fraquency="5">
                                (O:XMLVAR_InteractingWith_Brake) ! if{
                                    #UPDATE_CODE#
                                }
                            </Update>
                        </True>
                    </Condition>
                    <UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
                        <ANIM_CODE>
                            (O:XMLVAR_InteractingWith_Brake) if{
                                (O:BrakePosition) (&gt;O:AnimCode)
                            } els{
                                (E:SIMULATION TIME, second) (O:Prev_SIMULATION_TIME) - (&gt;O:Delta_SIMULATION_TIME)
                                (E:SIMULATION TIME, second) (&gt;O:Prev_SIMULATION_TIME)
                                (O:BrakePosition) (O:AnimCode) - (&gt;O:Delta_ANIM_POS)
                                (O:Delta_ANIM_POS) 0 != if{
                                    #ANIM_DELTA# #ANIM_DELTA# neg (O:Delta_ANIM_POS) 0 &gt; ? (O:AnimCode) + (&gt;O:AnimCode)
                                }
                            }
                            (O:AnimCode)
                        </ANIM_CODE>
                        <DOWN_CODE>1 (&gt;O:XMLVAR_InteractingWith_Brake)</DOWN_CODE>
                        <RELEASE_CODE>0 (&gt;O:XMLVAR_InteractingWith_Brake)</RELEASE_CODE>
                        <POSITIVE_AXIS_CODE>
                        (O:BrakePosition) #DRAG_SPEED# + #ANIM_LENGTH# min (&gt;O:BrakePosition)
                        (O:BrakePosition) 100 == (L:A32NX_PARK_BRAKE_LEVER_POS, bool) ! and if{
                            (&gt;K:PARKING_BRAKES)
                            (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (&gt;O:BrakeIsON)
                        }
                        </POSITIVE_AXIS_CODE>
                        <NEGATIVE_AXIS_CODE>
                        (O:BrakePosition) #DRAG_SPEED# - 0 max (&gt;O:BrakePosition)
                        (L:A32NX_PARK_BRAKE_LEVER_POS, bool) if{
                            (&gt;K:PARKING_BRAKES)
                            (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (&gt;O:BrakeIsON)
                        }
                        </NEGATIVE_AXIS_CODE>
                        <DRAG_CODE>
                        (O:BrakePosition) (O:DragScale) + #ANIM_LENGTH# min 0 max (&gt;O:BrakePosition)
                        (O:BrakePosition) 100 == (L:A32NX_PARK_BRAKE_LEVER_POS, bool) != if{
                            (&gt;K:PARKING_BRAKES)
                            (L:A32NX_PARK_BRAKE_LEVER_POS, bool) (&gt;O:BrakeIsON)
                        }
                        </DRAG_CODE>
                        <AXIS>Y</AXIS>
                        <NO_ARROWS/>
                        <CURSOR>Grab</CURSOR>
                        <WWISE_EVENT_1>parkbrk</WWISE_EVENT_1>
                        <WWISE_EVENT_2>parkbrk</WWISE_EVENT_2>
                    </UseTemplate>
                </Case>
                <Default>
                    <Condition>
                        <Test>
                            <Greater>
                                <Value>ANIM_DELAY</Value>
                                <Number>0</Number>
                            </Greater>
                        </Test>
                        <True>
                            <Update Fraquency="5">
                                #UPDATE_CODE#
                            </Update>
                        </True>
                    </Condition>
                    <UseTemplate Name="ASOBO_GT_Switch_Code">
                        <HELPID>HELPID_GAUGE_PARKING_BRAKE</HELPID>
                        <TOOLTIPID>TOOLTIPTEXT_PARKING_BRAKE</TOOLTIPID>
                        <WWISE_EVENT_1>parkbrk</WWISE_EVENT_1>
                        <WWISE_EVENT_2>parkbrk</WWISE_EVENT_2>
                        <ANIMREF_ID>0</ANIMREF_ID>
                        <Condition Valid="INVERT_ANIM">
                            <True>
                                <ANIMTIP_0_ON_PERCENT>1</ANIMTIP_0_ON_PERCENT>
                                <ANIMTIP_1_ON_PERCENT>0</ANIMTIP_1_ON_PERCENT>
                            </True>
                            <False>
                                <ANIMTIP_0_ON_PERCENT>0</ANIMTIP_0_ON_PERCENT>
                                <ANIMTIP_1_ON_PERCENT>1</ANIMTIP_1_ON_PERCENT>
                            </False>
                        </Condition>
                        <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.PARKBRAKE_RELEASED</ANIMTIP_0>
                        <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.PARKBRAKE_SET</ANIMTIP_1>
                    </UseTemplate>
                </Default>
            </Switch>
        </Component>
        <Condition Check="HIGHLIGHT_NODE_ID">
            <UseTemplate Name="ASOBO_GT_ComponentWith_PART_ID">
                <NODE_ID>#HIGHLIGHT_NODE_ID#</NODE_ID>
            </UseTemplate>
        </Condition>
    </Template>

    <Template Name="FBW_HANDLING_Knob_RudderTrim_Template">
        <DefaultTemplateParameters>
            <INCREMENT>5</INCREMENT>
            <DRAG_INCREMENT>1</DRAG_INCREMENT>
            <NODE_ID>HANDLING_Knob_RudderTrim</NODE_ID>
            <ANIM_NAME>HANDLING_Knob_RudderTrim</ANIM_NAME>
            <RESET_PUSH_NODE_ID>HANDLING_Push_RudderTrim_Reset</RESET_PUSH_NODE_ID>
            <RESET_PUSH_ANIM_NAME>HANDLING_Push_RudderTrim_Reset</RESET_PUSH_ANIM_NAME>
            <PART_ID>HANDLING_Knob_RudderTrim</PART_ID>
            <CURSOR>Hand</CURSOR>
            <Condition Check="NEEDLE_NODE_ID">
                <NEEDLE_ANIM_NAME>HANDLING_Knob_RudderTrim_Needle</NEEDLE_ANIM_NAME>
            </Condition>
            <ANIM_SIMVAR_MIN>-100</ANIM_SIMVAR_MIN>
            <ANIM_SIMVAR_MAX>100</ANIM_SIMVAR_MAX>
            <ANIM_SIMVAR_SCALE>-1</ANIM_SIMVAR_SCALE>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.WHEEL_RUDDER_TRIM</TOOLTIPID>
            <WWISE_EVENT>rudtrim</WWISE_EVENT>
            <WWISE_EVENT_1>rudtrim</WWISE_EVENT_1>
            <WWISE_EVENT_2>rudtrim</WWISE_EVENT_2>
        </DefaultTemplateParameters>
        <Switch>
            <Case Valid="USE_DEFAULT_VARIABLE_SPEED_TRIM">
                <UseTemplate Name="ASOBO_HANDLING_Trim_Variable_Speed_Base_Template">
                    <!-- Trim_Base configuration -->
                    <ARROW_TYPE>Curved</ARROW_TYPE>
                    <TRIM_NAME>RudderTrim</TRIM_NAME>
                    <GET_TRIM>(A:RUDDER TRIM PCT, Percent)</GET_TRIM>
                    <SET_TRIM>(&gt;K:RUDDER_TRIM_SET_EX1)</SET_TRIM>
                    <ADDITIONAL_TESTS>(A:AUTOPILOT MASTER, Bool) ! and</ADDITIONAL_TESTS>
                </UseTemplate>
            </Case>
            <Case Check="AIRBUS_TYPE">
                <Component ID="#NODE_ID#" Node="#NODE_ID#">
                    <UseTemplate Name="FBW_Anim_Interactions">
                        <ANIM_TYPE>KNOB</ANIM_TYPE>
                        <ANIM_TEMPLATE>ASOBO_GT_Switch_3States</ANIM_TEMPLATE>
                        <SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
                        <SWITCH_POSITION_VAR>XMLVAR_RudderTrim</SWITCH_POSITION_VAR>
                        <MOMENTARY_REPEAT_FREQUENCY>40</MOMENTARY_REPEAT_FREQUENCY>
                        <CODE_POS_0>(&gt;K:RUDDER_TRIM_LEFT)</CODE_POS_0>
                        <CODE_POS_2>(&gt;K:RUDDER_TRIM_RIGHT)</CODE_POS_2>
                        <MOMENTARY_SWITCH/>
                        <STATE_MAX_TIMER>0.1</STATE_MAX_TIMER>
                        <STATE0_TIMER>0.1</STATE0_TIMER>
                        <SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
                        <ARROW_TYPE>Curved</ARROW_TYPE>
                    </UseTemplate>
                </Component>
                <Condition Check="NO_RESET_PUSH">
                    <False>
                        <Component ID="#RESET_PUSH_NODE_ID#" Node="#RESET_PUSH_NODE_ID#">
                            <UseTemplate Name="FBW_Anim_Interactions">
                                <ANIM_TYPE>BUTTON_HELD</ANIM_TYPE>
                                <ANIM_TEMPLATE>ASOBO_GT_Push_Button_Held</ANIM_TEMPLATE>
                                <ANIM_NAME>#RESET_PUSH_ANIM_NAME#</ANIM_NAME>
                                <LEFT_SINGLE_CODE>(&gt;K:RUDDER_TRIM_RESET)</LEFT_SINGLE_CODE>
                                <WWISE_EVENT_1>roundbutton</WWISE_EVENT_1>
                                <WWISE_EVENT_2>roundbutton</WWISE_EVENT_2>
                                <TOOLTIPID>TT:COCKPIT.TOOLTIPS.RUDDER_TRIM_RESET</TOOLTIPID>
                            </UseTemplate>
                        </Component>
                    </False>
                </Condition>
            </Case>
            <Default>
                <Component ID="#NODE_ID#" Node="#NODE_ID#">
                    <UseTemplate Name = "ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
                        <ANIM_SIMVAR>RUDDER TRIM PCT</ANIM_SIMVAR>
                        <ANIM_SIMVAR_UNITS>percent</ANIM_SIMVAR_UNITS>
                        <ANIM_SIMVAR_SCALE>0.5</ANIM_SIMVAR_SCALE>
                        <ANIM_SIMVAR_BIAS>50</ANIM_SIMVAR_BIAS>
                        <AXIS>X</AXIS>
                        <POSITIVE_AXIS_CODE>
                            (A:RUDDER TRIM PCT, Percent) #INCREMENT# + #ANIM_SIMVAR_MAX# min (&gt;K:RUDDER_TRIM_SET)
                        </POSITIVE_AXIS_CODE>
                        <NEGATIVE_AXIS_CODE>
                            (A:RUDDER TRIM PCT, Percent) #INCREMENT# - #ANIM_SIMVAR_MIN# max (&gt;K:RUDDER_TRIM_SET)
                        </NEGATIVE_AXIS_CODE>
                        <Condition Check="USE_TRAJECTORY_DRAG_MODE">
                            <True>
                                <DRAG_CODE>
                                    (M:DragPercent) #ANIM_SIMVAR_MAX# #ANIM_SIMVAR_MIN# - * #ANIM_SIMVAR_MIN# + sp0
                                    l0 #ANIM_SIMVAR_MAX# min #ANIM_SIMVAR_MIN# max (&gt;K:RUDDER_TRIM_SET)
                                </DRAG_CODE>
                            </True>
                            <False>
                                <DRAG_CODE>
                                    (O:_LastPos) (O:StartPos) - abs 0.001 &gt; if{
                                        (A:RUDDER TRIM PCT, Percent) #DRAG_INCREMENT# (O:DragScale) * + #ANIM_SIMVAR_MAX# min #ANIM_SIMVAR_MIN# max (&gt;K:RUDDER_TRIM_SET)
                                    }
                                </DRAG_CODE>
                            </False>
                        </Condition>
                        <DOWN_CODE>
                            (O:_LastPos) (&gt;O:StartPos)
                        </DOWN_CODE>
                        <RELEASE_CODE>
                            (O:_LastPos) (O:StartPos) - abs 0.001 &lt; if{
                                (O:StartPos) 0 &gt; if{
                                    g1
                                } els{
                                    g2
                                }
                            }
                        </RELEASE_CODE>
                    </UseTemplate>
                </Component>
            </Default>
        </Switch>
        <Condition Check="NEEDLE_NODE_ID">
            <Component ID="#NEEDLE_NODE_ID#" Node="#NEEDLE_NODE_ID#">
                <UseTemplate Name="ASOBO_GT_Anim_Sim">
                    <ANIM_NAME>#NEEDLE_ANIM_NAME#</ANIM_NAME>
                    <ANIM_SIMVAR>RUDDER TRIM PCT</ANIM_SIMVAR>
                    <ANIM_SIMVAR_UNITS>percent</ANIM_SIMVAR_UNITS>
                    <ANIM_SIMVAR_SCALE>0.5</ANIM_SIMVAR_SCALE>
                    <ANIM_SIMVAR_BIAS>50</ANIM_SIMVAR_BIAS>
                </UseTemplate>
            </Component>
        </Condition>
    </Template>

    <Template Name="FBW_HANDLING_Wheel_ElevatorTrim_Template">
        <DefaultTemplateParameters>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.WHEEL_PITCH_TRIM (%((A:ELEVATOR TRIM POSITION, degrees) -3.15 &lt;)%{if} TT:COCKPIT.TOOLTIPS.PITCH_TRIM_NOSE_DN%{else}%((A:ELEVATOR TRIM POSITION, degrees) 3.15 &lt;) %{if} TT:COCKPIT.TOOLTIPS.PITCH_TRIM_NEUTRAL%{else}TT:COCKPIT.TOOLTIPS.PITCH_TRIM_NOSE_UP%{end} %{end})</TOOLTIPID>
            <ANIM_NAME>HANDLING_Wheel_ElevatorTrim</ANIM_NAME>
            <NODE_ID>HANDLING_Wheel_ElevatorTrim</NODE_ID>
            <PART_ID>HANDLING_Wheel_ElevatorTrim</PART_ID>
            <DRAG_MIN_VALUE>0</DRAG_MIN_VALUE>
            <DRAG_MAX_VALUE>100</DRAG_MAX_VALUE>
            <ANIM_NAME2>HANDLING_Wheel_ElevatorTrim_2</ANIM_NAME2>
            <NODE_ID2>HANDLING_Wheel_ElevatorTrim_Pitch_2</NODE_ID2>
            <DRAG_DELTA>0.001</DRAG_DELTA>
            <DRAG_SPEED>0.03</DRAG_SPEED>
            <LEFT_SINGLE_CODE>
                (L:A32NX_HYD_TRIM_WHEEL_PERCENT) (&gt;O:Position)
                1 (&gt;O:IsDragging)
            </LEFT_SINGLE_CODE>
            <LEFT_RELEASE_CODE>
                0 (&gt;O:IsDragging)
            </LEFT_RELEASE_CODE>
            <DRAG_CODE type="rnp">
                (K:AXIS_ELEV_TRIM_SET) = ((O:Position, number) / 100 * 16383 * 2) - 16383;
            </DRAG_CODE>
            <REVERSE_INTERACTION />
        </DefaultTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Lever_DraggingYAxis_Code">
                <ANIM_LENGTH>100</ANIM_LENGTH>
                <ANIM_CODE>(L:A32NX_HYD_TRIM_WHEEL_PERCENT)</ANIM_CODE>
                <UP_CODE>#DRAG_CODE#</UP_CODE>
                <DOWN_CODE>#DRAG_CODE#</DOWN_CODE>
            </UseTemplate>
            <Update Frequency="60" type="rnp">
                if (O:IsDragging, number) == 1 {
                    #DRAG_CODE#;
                }
            </Update>
        </Component>
        <Component ID="#NODE_ID2#" Node="#NODE_ID2#">
            <UseTemplate Name="ASOBO_GT_Lever_DraggingYAxis_Code">
                <ANIM_NAME>#ANIM_NAME2#</ANIM_NAME>
                <ANIM_LENGTH>100</ANIM_LENGTH>
                <ANIM_CODE>(L:A32NX_HYD_TRIM_WHEEL_PERCENT)</ANIM_CODE>
                <UP_CODE>#DRAG_CODE#</UP_CODE>
                <DOWN_CODE>#DRAG_CODE#</DOWN_CODE>
            </UseTemplate>
            <Update Frequency="60" type="rnp">
                if (O:IsDragging, number) == 1 {
                    #DRAG_CODE#;
                }
            </Update>
        </Component>
    </Template>

    <Template Name="FBW_HANDLING_Gear_Lever_Template">
        <DefaultTemplateParameters>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPSV2.LANDING_GEAR_LEVER_GEAR_TITLE</TOOLTIPID>
            <ANIM_NAME>lever_landing_gear</ANIM_NAME>
            <NODE_ID>LEVER_LANDINGGEAR</NODE_ID>
            <PART_ID>LEVER_LANDINGGEAR</PART_ID>
            <ANIM_LAG>0</ANIM_LAG>
            <DRAG_MIN_VALUE>0</DRAG_MIN_VALUE>
            <DRAG_MAX_VALUE>100</DRAG_MAX_VALUE>
            <DRAG_DELTA>0.001</DRAG_DELTA>
            <DRAG_SPEED>0.03</DRAG_SPEED>
            <LEFT_SINGLE_CODE>
                (L:A32NX_GEAR_HANDLE_POSITION, Number) 0.95 &gt; if{
                    (&gt;K:GEAR_UP)
                } els{
                    (&gt;K:GEAR_DOWN)
                }
            </LEFT_SINGLE_CODE>
            <LEFT_RELEASE_CODE>
                (L:A32NX_GEAR_LEVER_LOCKED, Boolean) 1 ==  if{
                    (&gt;K:GEAR_DOWN)
                }
            </LEFT_RELEASE_CODE>
            <DRAG_CODE>

            </DRAG_CODE>
        </DefaultTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Lever_DraggingYAxis_Code">
                <ANIM_LENGTH>3</ANIM_LENGTH>
                <ANIM_CODE>
                        (L:A32NX_GEAR_HANDLE_POSITION, Percent) 3 *
                </ANIM_CODE>
                <UP_CODE>  (&gt;K:GEAR_UP)</UP_CODE>
                <DOWN_CODE> (&gt;K:GEAR_DOWN)</DOWN_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_HANDLING_Gear_Red_Arrow_Template">
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="Asobo_GT_Emissive_Gauge">
                <!-- XMFR-ESS power is CB 28LP from 901XP/A or CB 29LP from 801XP/C (relay switched) -->
                <EMISSIVE_CODE>(L:A32NX_FWC_1_LG_RED_ARROW) (L:A32NX_FWC_2_LG_RED_ARROW) or (L:A32NX_OVHD_INTLT_ANN, number) s0 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or l0 2 == if{ 0.1 } els{ 1 } * (L:A32NX_ELEC_AC_ESS_SHED_BUS_IS_POWERED) (L:A32NX_ELEC_AC_STAT_INV_BUS_IS_POWERED) or *</EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>


    <Template Name="FBW_HANDLING_Indicator_ElevatorTrim_Template">
		<Parameters Type="Default">
			<ANIM_NAME>HANDLING_Indicator_ElevatorTrim</ANIM_NAME>
		</Parameters>
        <UseTemplate Name="ASOBO_GT_Anim_Code">
            <ANIM_CODE>(L:A32NX_HYD_TRIM_WHEEL_PERCENT)</ANIM_CODE>
            <ANIM_LENGTH>100</ANIM_LENGTH>
        </UseTemplate>
	</Template>

    <Template Name="FBW_HANDLING_RudderPedals_Template">
        <DefaultTemplateParameters>
            <ID>1</ID>
        </DefaultTemplateParameters>
        <UseTemplate Name="FBW_HANDLING_RudderPedals_SubTemplate"></UseTemplate>
    </Template>

    <Template Name="FBW_HANDLING_RudderPedals_SubTemplate">
        <DefaultTemplateParameters>
            <ANIM_NAME>HANDLING_RudderPedals</ANIM_NAME>
            <ANIM_LAG>400</ANIM_LAG>
            <!-- Each rudder pedal root node is shared for pilot & copilot (L & R) but brakes are splitted -->
            <NODE_ID>HANDLING_RudderPedals_1</NODE_ID> <!-- any valid node -->
            <NODE_ID_L_BRAKE_1>HANDLING_RudderPedals_1_1_Brake</NODE_ID_L_BRAKE_1>
            <NODE_ID_L_BRAKE_2>HANDLING_RudderPedals_2_1_Brake</NODE_ID_L_BRAKE_2>
            <NODE_ID_R_BRAKE_1>HANDLING_RudderPedals_1_2_Brake</NODE_ID_R_BRAKE_1>
            <NODE_ID_R_BRAKE_2>HANDLING_RudderPedals_2_2_Brake</NODE_ID_R_BRAKE_2>
            <NODE_ID_L_RUDDER>HANDLING_RudderPedals_1</NODE_ID_L_RUDDER>
            <NODE_ID_R_RUDDER>HANDLING_RudderPedals_2</NODE_ID_R_RUDDER>
            <PART_ID_BRAKES>HANDLING_RudderPedals</PART_ID_BRAKES>
            <PART_ID_RUDDERS>HANDLING_RudderPedals</PART_ID_RUDDERS>
            <DIFFERENTIATE_BRAKE_ANIM_L_R>True</DIFFERENTIATE_BRAKE_ANIM_L_R>
            <USE_BRAKE />
        </DefaultTemplateParameters>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_L_BRAKE_1#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_BRAKES#</PART_ID>
        </UseTemplate>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_L_BRAKE_2#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_BRAKES#</PART_ID>
        </UseTemplate>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_R_BRAKE_1#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_BRAKES#</PART_ID>
        </UseTemplate>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_R_BRAKE_2#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_BRAKES#</PART_ID>
        </UseTemplate>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_L_RUDDER#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_RUDDERS#</PART_ID>
        </UseTemplate>
        <UseTemplate Name="ASOBO_GT_Highlight_Template">
            <HIGHLIGHT_NODE_ID>#NODE_ID_R_RUDDER#</HIGHLIGHT_NODE_ID>
            <PART_ID>#PART_ID_RUDDERS#</PART_ID>
        </UseTemplate>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <DefaultTemplateParameters>
                <Condition Check="USE_BRAKE">
                    <Condition Valid="DIFFERENTIATE_BRAKE_ANIM_L_R">
                        <True>
                            <BRAKE_ANIM_NAME_L>HANDLING_RudderPedals_Brake_L</BRAKE_ANIM_NAME_L>
                            <BRAKE_ANIM_NAME_R>HANDLING_RudderPedals_Brake_R</BRAKE_ANIM_NAME_R>
                        </True>
                        <False>
                            <BRAKE_ANIM_NAME>HANDLING_RudderPedals_Brake</BRAKE_ANIM_NAME>
                        </False>
                    </Condition>
                </Condition>
            </DefaultTemplateParameters>
            <OverrideTemplateParameters>
                <Condition Valid="NO_PART_ID_ON_ANIM_NODE">
                    <PART_ID></PART_ID>
                </Condition>
            </OverrideTemplateParameters>
            <UseTemplate Name="ASOBO_GT_Anim_Code">
                <ID>1</ID>
                <ANIM_LENGTH>200</ANIM_LENGTH>
                <ANIM_CODE>(L:A32NX_RUDDER_PEDAL_ANIMATION_POSITION, number) 100 +</ANIM_CODE>
                <!-- [-100, 100] + 100 => [0, 200] -->
            </UseTemplate>
            <Condition Check="USE_BRAKE">
                <UseTemplate Name="FBW_HANDLING_RudderPedals_Brake_Template">
                    <Condition Valid="DIFFERENTIATE_BRAKE_ANIM_L_R">
                        <True>
                            <ANIM_NAME_L>#BRAKE_ANIM_NAME_L#</ANIM_NAME_L>
                            <ANIM_NAME_R>#BRAKE_ANIM_NAME_R#</ANIM_NAME_R>
                        </True>
                        <False>
                            <ANIM_NAME>#BRAKE_ANIM_NAME#</ANIM_NAME>
                        </False>
                    </Condition>
                </UseTemplate>
            </Condition>
        </Component>
    </Template>

    <Template Name="FBW_HANDLING_RudderPedals_Brake_Template">
        <DefaultTemplateParameters>
            <ANIM_LENGTH>100</ANIM_LENGTH>
            <ANIM_NAME_L>HANDLING_RudderPedals_Brake_L</ANIM_NAME_L>
            <ANIM_NAME_R>HANDLING_RudderPedals_Brake_R</ANIM_NAME_R>
        </DefaultTemplateParameters>
            <UseTemplate Name="ASOBO_GT_Anim_Code">
                <ANIM_NAME>#ANIM_NAME_L#</ANIM_NAME>
                <ANIM_CODE>(L:A32NX_LEFT_BRAKE_PEDAL_INPUT, number)</ANIM_CODE>
            </UseTemplate>
            <UseTemplate Name="ASOBO_GT_Anim_Code">
                <ANIM_NAME>#ANIM_NAME_R#</ANIM_NAME>
                <ANIM_CODE>(L:A32NX_RIGHT_BRAKE_PEDAL_INPUT, number)</ANIM_CODE>
            </UseTemplate>
    </Template>

    <Template Name="FBW_HANDLING_Switch_AntiSkid_Template">
        <DefaultTemplateParameters>
            <WWISE_EVENT_1>lswitch</WWISE_EVENT_1>
            <WWISE_EVENT_2>lswitch</WWISE_EVENT_2>
        </DefaultTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Switch_Code">
                <LEFT_SINGLE_CODE>(&gt;K:ANTISKID_BRAKES_TOGGLE)</LEFT_SINGLE_CODE>
                <ANIM_CODE>(A:ANTISKID BRAKES ACTIVE, Bool) 100 *</ANIM_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_HANDLING_GRAVITYGEAR_Template">
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <Component ID="#NODE_ID#_BUTTON_CLICKZONE" Node="#NODE_ID#_BUTTON_CLICKZONE">
                <UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Leave_Code">
                    <CURSOR>DownArrow</CURSOR>
                    <LEFT_SINGLE_CODE type="rnp">
                        alias turned = (L:A32NX_GRAVITYGEAR_TURNED, number);
                        turned = 0;
                    </LEFT_SINGLE_CODE>
                </UseTemplate>
            </Component>

            <Component ID="#NODE_ID#_ACTIVATE_CLICKZONE" Node="#NODE_ID#_ACTIVATE_CLICKZONE">
                <UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Leave_Code">
                    <CURSOR>UpArrow</CURSOR>
                    <LEFT_SINGLE_CODE type="rnp">
                        alias turned = (L:A32NX_GRAVITYGEAR_TURNED, number);
                        turned = 1;
                    </LEFT_SINGLE_CODE>
                </UseTemplate>
                <UseTemplate Name="ASOBO_GT_Visibility_Code">
                    <VISIBILITY_CODE>(L:A32NX_GRAVITYGEAR_TURNED, bool) 1 !=</VISIBILITY_CODE>
                </UseTemplate>
            </Component>

            <Component ID="#NODE_ID#_CRANE_CLICKZONE" Node="#NODE_ID#_CRANE_CLICKZONE">
                <Update Frequency = "100" type="rnp">
                    alias turned = (L:A32NX_GRAVITYGEAR_TURNED, number);
                    alias turnPct = (L:A32NX_GRAVITYGEAR_TURN_PCT, number);
                    alias stowing = (L:A32NX_GRAVITYGEAR_STOWING, number);
                    let maxTurnPct = turned * 100;
                    let turnAnimSpeed = 1;
                    if turned == 1 {
                        turnPct = (turnPct + turnAnimSpeed).min(maxTurnPct);
                        stowing = 0;
                    } else {
                        turnPct = (turnPct - turnAnimSpeed).max(0);
                        stowing = 1;
                    }


                    alias rotations = (L:A32NX_GRAVITYGEAR_ROTATIONS, number);
                    alias rotatePct = (L:A32NX_GRAVITYGEAR_ROTATE_PCT, number);
                    let maxRotatePct = rotations * 100;
                    let rotateAnimSpeed = 1;
                    if rotatePct &lt; maxRotatePct {
                        rotatePct = (rotatePct + rotateAnimSpeed).min(maxRotatePct);
                    } else {
                        rotatePct = (rotatePct - rotateAnimSpeed).max(maxRotatePct);
                    }
                </Update>
                <UseTemplate Name="ASOBO_GT_Visibility_Code">
                    <VISIBILITY_CODE>(L:A32NX_GRAVITYGEAR_TURNED, bool)</VISIBILITY_CODE>
                </UseTemplate>
                <UseTemplate Name="ASOBO_GT_Knob_Infinite">
                    <ANTICLOCKWISE_CODE>
                        (L:A32NX_GRAVITYGEAR_TURNED, number) 1 == (L:A32NX_GRAVITYGEAR_ROTATE_PCT, number) (L:A32NX_GRAVITYGEAR_ROTATIONS, number) 100 * == and if{
                            (L:A32NX_GRAVITYGEAR_ROTATIONS, number) 1 - 0 max (&gt;L:A32NX_GRAVITYGEAR_ROTATIONS, number)
                        }
                    </ANTICLOCKWISE_CODE>
                    <CLOCKWISE_CODE>
                        (L:A32NX_GRAVITYGEAR_TURNED, number) 1 == (L:A32NX_GRAVITYGEAR_ROTATE_PCT, number) (L:A32NX_GRAVITYGEAR_ROTATIONS, number) 100 * == and if{
                            (L:A32NX_GRAVITYGEAR_ROTATIONS, number) 1 + 3 min (&gt;L:A32NX_GRAVITYGEAR_ROTATIONS, number)
                        }
                    </CLOCKWISE_CODE>
                </UseTemplate>
            </Component>
            <Component ID="GearEmerExt" Node="GearEmerExt">
                <UseTemplate Name="ASOBO_GT_Anim_Code">
                    <ANIM_CODE type="rnp" return="number">
                        alias turnPct = (L:A32NX_GRAVITYGEAR_TURN_PCT, number);
                        alias rotatePct = (L:A32NX_GRAVITYGEAR_ROTATE_PCT, number);
                        alias stowing = (L:A32NX_GRAVITYGEAR_STOWING, number);

                        let anim = turnPct + (((rotatePct % 100) + 100) % 100);
                        if stowing == 1 {
                            anim = 200 + (100 - turnPct);
                        }
                        anim
                    </ANIM_CODE>
                    <ANIM_NAME>#NODE_ID#</ANIM_NAME>
                    <ANIM_LENGTH>300</ANIM_LENGTH>
                </UseTemplate>
            </Component>
        </Component>
    </Template>

</ModelBehaviors>
