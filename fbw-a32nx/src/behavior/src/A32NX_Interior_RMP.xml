<!-- Copyright (c) 2022, 2023 FlyByWire Simulations -->
<!-- SPDX-License-Identifier: GPL-3.0 -->

<ModelBehaviors>
    <Template Name="FBW_RADIO_MANAGEMENT_PANEL_Template">
        <UseTemplate Name="FBW_RMP_CONTROLS_Template" />
        <UseTemplate Name="FBW_RMP_COMMS_MODE_SELECTION_Template" />
        <UseTemplate Name="FBW_RMP_NAV_MODE_SELECTION_Template" />
    </Template>

    <Template Name="FBW_RMP_CONTROLS_Template">
        <!-- Panel ON/OFF Toggle Switch -->
        <Component ID="RMP_TOGGLE_SWITCH_#SIDE#" Node="SWITCH_RADIO#SIDE#_1">
            <UseTemplate Name="FBW_Anim_Interactions">
                <ANIM_TYPE>SWITCH</ANIM_TYPE>
                <ANIM_TEMPLATE>FBW_Switch_LeftClick_MouseWheel</ANIM_TEMPLATE>
                <ANIM_NAME>SWITCH_RADIO#SIDE#_1</ANIM_NAME>
                <NODE_ID>SWITCH_RADIO#SIDE#_1</NODE_ID>
                <PART_ID>RMP_TOGGLE_SWITCH_#SIDE#</PART_ID>
                <TOGGLE_EVENT>A32NX_RMP_#SIDE#_TOGGLE_SWITCH</TOGGLE_EVENT>
                <SIMVAR_NAME>A32NX_RMP_#SIDE#_TOGGLE_SWITCH</SIMVAR_NAME>
                <ADDITIONAL_EVENT_CODE>(&gt;H:A32NX_RMP_#SIDE#_TOGGLE_SWITCH)</ADDITIONAL_EVENT_CODE>
                <SIMVAR_GROUP>L</SIMVAR_GROUP>
                <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.RADIO_SELECT_TURN_RMP_ON</ANIMTIP_0>
                <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.RADIO_SELECT_TURN_RMP_OFF</ANIMTIP_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            </UseTemplate>
        </Component>

        <!-- Outer frequency integer selection knob -->
        <Component ID="RMP_DIAL_LARGE_#SIDE#" Node="KNOB_RADIO#SIDE#_BIG">
            <UseTemplate Name="ASOBO_GT_Knob_Infinite">
                <COUNT>36</COUNT>
                <ANIMREF_ID>0</ANIMREF_ID>
                <WWISE_EVENT>RMPknob</WWISE_EVENT>
                <ANIMCURSOR_MIN>-1</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>-1</ANIMCURSOR_MAX>
                <ANIM_NAME>KNOB_RADIO#SIDE#_BIG</ANIM_NAME>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.RADIO_TUNE_SBY_FREQUENCY_DEC</ANIMTIP_0>
                <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.RADIO_TUNE_SBY_FREQUENCY_INC</ANIMTIP_1>
                <CLOCKWISE_CODE>(&gt;H:A32NX_RMP_#SIDE#_OUTER_KNOB_TURNED_CLOCKWISE)</CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>(&gt;H:A32NX_RMP_#SIDE#_OUTER_KNOB_TURNED_ANTICLOCKWISE)</ANTICLOCKWISE_CODE>
            </UseTemplate>
        </Component>

        <!-- Inner frequency decimal / course selection knob -->
        <Component ID="RMP_DIAL_SMALL_#SIDE#" Node="KNOB_RADIO#SIDE#_SMALL">
            <UseTemplate Name="ASOBO_GT_Knob_Infinite">
                <COUNT>36</COUNT>
                <ANIMREF_ID>0</ANIMREF_ID>
                <WWISE_EVENT>RMPknob</WWISE_EVENT>
                <ANIMCURSOR_MIN>-1</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>-1</ANIMCURSOR_MAX>
                <ANIM_NAME>KNOB_RADIO#SIDE#_SMALL</ANIM_NAME>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.RADIO_TUNE_SBY_FREQUENCY_DEC</ANIMTIP_0>
                <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.RADIO_TUNE_SBY_FREQUENCY_INC</ANIMTIP_1>
                <CLOCKWISE_CODE>(&gt;H:A32NX_RMP_#SIDE#_INNER_KNOB_TURNED_CLOCKWISE)</CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>(&gt;H:A32NX_RMP_#SIDE#_INNER_KNOB_TURNED_ANTICLOCKWISE)</ANTICLOCKWISE_CODE>
            </UseTemplate>
        </Component>

        <!-- Panel transfer button -->
        <!-- Force COM3_RADIO_SET_HZ to 0 to show "DATA" at startup -->
        <Component ID="RMP_TRANSFER_BUTTON_#SIDE#" Node="PUSH_RADIO#SIDE#_ARROWS">
            <Update Once="True">
                0 (&gt;K:COM3_RADIO_SET_HZ)
            </Update>
            <UseTemplate Name="FBW_Anim_Interactions">
                <ANIM_TYPE>BUTTON</ANIM_TYPE>
                <ANIM_TEMPLATE>ASOBO_GT_Push_Button</ANIM_TEMPLATE>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <ANIM_NAME>PUSH_RADIO#SIDE#_ARROWS</ANIM_NAME>
                <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
                <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
                <TOOLTIPID>TT:COCKPIT.TOOLTIPS.RADIO_FREQUENCY_TRANSFER_KEY</TOOLTIPID>
                <LEFT_SINGLE_CODE>(&gt;H:A32NX_RMP_#SIDE#_TRANSFER_BUTTON_PRESSED)</LEFT_SINGLE_CODE>
            </UseTemplate>

            <UseTemplate Name="FBW_RMP_BACKLIGHT_Template">
                <BASE_NAME>ARROWS</BASE_NAME>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_RMP_COMMS_MODE_SELECTION_Template">
        <!-- VHF1 mode selection button -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <MODE_ID>1</MODE_ID>
            <BASE_NAME>VHF1</BASE_NAME>
        </UseTemplate>

        <!-- VHF2 mode selection button -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KORRY_BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <MODE_ID>2</MODE_ID>
            <BASE_NAME>VHF2</BASE_NAME>
        </UseTemplate>

        <!-- VHF3 mode selection button -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <MODE_ID>3</MODE_ID>
            <BASE_NAME>VHF3</BASE_NAME>
        </UseTemplate>

        <!-- LOAD button (CPDLC frequency loading) -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_LOAD_BUTTON_AND_LED</ANIM_TEMPLATE>
            <MODE_ID>32</MODE_ID>
            <BASE_NAME>LOAD</BASE_NAME>
        </UseTemplate>

        <!-- Inop HF1 mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <INOP>1</INOP>
            <BASE_NAME>HF1</BASE_NAME>
            <MODE_ID>4</MODE_ID>
        </UseTemplate>

        <!-- Inop HF2 mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <INOP>1</INOP>
            <BASE_NAME>HF2</BASE_NAME>
            <MODE_ID>5</MODE_ID>
        </UseTemplate>

        <!-- Inop AM mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <INOP>1</INOP>
            <BASE_NAME>AM</BASE_NAME>
            <MODE_ID>11</MODE_ID>
        </UseTemplate>

        <!-- SEL word indicator light -->
        <Component ID="PUSH_RADIO#SIDE#_SEL_SEQ1" Node="PUSH_RADIO#SIDE#_SEL_SEQ1">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                 <POTENTIOMETER>7</POTENTIOMETER>
                <EMISSIVE_CODE type="rnp" return="number">
                    let indicatorsPowered = #INDICATORS_POWERED, bool#;
                    let id = #ID, number#;
                    alias toggleSwitch = (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool);
                    alias selectedModeLeft = (L:A32NX_RMP_L_SELECTED_MODE, number);
                    alias selectedModeRight = (L:A32NX_RMP_R_SELECTED_MODE, number);
                    alias annunciatorLight = (L:A32NX_OVHD_INTLT_ANN, number);
                    alias dc2Powered = (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, bool);
                    let emissiveDim = if annunciatorLight == 2 { 0.05 } else { 1 };
                    // @todo abnormal defined differently with NAV modes available.

                    let rmpLeftAbnormal = id == 1 and (selectedModeLeft == 2 or selectedModeLeft == 3 or selectedModeRight == 1);
                    let rmpRightAbnormal = id == 2 and (selectedModeRight == 1 or selectedModeRight == 3 or selectedModeLeft == 2);

                    (if (toggleSwitch and (rmpLeftAbnormal or rmpRightAbnormal) or ((annunciatorLight == 0) and dc2Powered)) and indicatorsPowered {
                        1 * emissiveDim
                    } else {
                        0
                    })
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>

        <!-- SEL indicator led light -->
        <Component ID="PUSH_RADIO#SIDE#_SEL_SEQ2" Node="PUSH_RADIO#SIDE#_SEL_SEQ2">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                 <POTENTIOMETER>7</POTENTIOMETER>
                <EMISSIVE_CODE type="rnp" return="number">
                    let indicatorsPowered = #INDICATORS_POWERED, bool#;
                    let id = #ID, number#;
                    alias toggleSwitch = (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool);
                    alias selectedModeLeft = (L:A32NX_RMP_L_SELECTED_MODE, number);
                    alias selectedModeRight = (L:A32NX_RMP_R_SELECTED_MODE, number);
                    alias annunciatorLight = (L:A32NX_OVHD_INTLT_ANN, number);
                    alias dc2Powered = (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, bool);
                    let emissiveDim = if annunciatorLight == 2 { 0.05 } else { 1 };
                    // @todo abnormal defined differently with NAV modes available.

                    let rmpLeftAbnormal = id == 1 and (selectedModeLeft == 2 or selectedModeLeft == 3 or selectedModeRight == 1);
                    let rmpRightAbnormal = id == 2 and (selectedModeRight == 1 or selectedModeRight == 3 or selectedModeLeft == 2);

                    (if (toggleSwitch and (rmpLeftAbnormal or rmpRightAbnormal) or ((annunciatorLight == 0) and dc2Powered)) and indicatorsPowered {
                        1 * emissiveDim
                    } else {
                        0
                    })
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>

        <!-- SEL indicator backlighting -->
        <UseTemplate Name="FBW_RMP_BACKLIGHT_Template">
            <POTENTIOMETER>7</POTENTIOMETER>
            <BASE_NAME>SEL</BASE_NAME>
        </UseTemplate>
    </Template>

    <Template Name="FBW_RMP_NAV_MODE_SELECTION_Template">
        <!-- NAV mode button guard -->
        <Component ID="RMP_NAV_LOCK_#SIDE#" Node="LOCK_RADIO#SIDE#_NAV">
            <UseTemplate Name="ASOBO_GT_Switch_Code">
                <ANIM_NAME>LOCK_RADIO#SIDE#_NAV</ANIM_NAME>
                <ANIM_LENGTH>100</ANIM_LENGTH>
                <ANIM_CODE>(L:XMLVAR_RMP_#SIDE#_NavLockOff) 100 *</ANIM_CODE>
                <LEFT_SINGLE_CODE>(L:XMLVAR_RMP_#SIDE#_NavLockOff) ! (&gt;L:XMLVAR_RMP_#SIDE#_NavLockOff)</LEFT_SINGLE_CODE>
                <WWISE_EVENT_1></WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2></WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.</NORMALIZED_TIME_2>
                <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.GENERIC_BUTTON_GUARD_ON</ANIMTIP_0>
                <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.GENERIC_BUTTON_GUARD_OFF</ANIMTIP_1>
            </UseTemplate>
        </Component>

        <!-- NAV mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <BASE_NAME>NAV</BASE_NAME>
            <MODE_ID>12</MODE_ID>
        </UseTemplate>

        <!-- VOR mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <MODE_ID>6</MODE_ID>
            <BASE_NAME>VOR</BASE_NAME>
        </UseTemplate>

        <!-- ILS mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <BASE_NAME>ILS</BASE_NAME>
            <MODE_ID>7</MODE_ID>
        </UseTemplate>

        <!-- GLS mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <BASE_NAME>GLS</BASE_NAME>
            <MODE_ID>8</MODE_ID>
        </UseTemplate>

        <!-- MLS mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <BASE_NAME>MLS</BASE_NAME>
            <MODE_ID>9</MODE_ID>
        </UseTemplate>

        <!-- ADF mode button and led -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_RMP_MODE_BUTTON_AND_LED</ANIM_TEMPLATE>
            <BASE_NAME>ADF</BASE_NAME>
            <MODE_ID>10</MODE_ID>
        </UseTemplate>
    </Template>

    <Template Name="FBW_RMP_MODE_BUTTON_AND_LED">
        <DefaultTemplateParameters>
            <INOP>0</INOP>
            <MODE_ID>0</MODE_ID>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <NODE_ID>PUSH_RADIO#SIDE#_#BASE_NAME#</NODE_ID>
            <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
            <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
            <ANIM_NAME_BUTTON>PUSH_RADIO#SIDE#_#BASE_NAME#</ANIM_NAME_BUTTON>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.RADIO_SELECT_#BASE_NAME#</TOOLTIPID>
        </DefaultTemplateParameters>

        <!-- Button to be pressed -->
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Push_Button">
                <ANIM_NAME>#ANIM_NAME_BUTTON#</ANIM_NAME>
                <LEFT_SINGLE_CODE>(&gt;H:A32NX_RMP_#SIDE#_#BASE_NAME#_BUTTON_PRESSED)</LEFT_SINGLE_CODE>
            </UseTemplate>
        </Component>

        <!-- LED light next to button indicating if mode is active -->
        <UseTemplate Name="FBW_RMP_MODE_SELECTED_LED" />

        <!-- Button label backlight -->
        <UseTemplate Name="FBW_RMP_BACKLIGHT_Template" />
    </Template>

    <Template Name="FBW_RMP_MODE_SELECTED_LED">
        <DefaultTemplateParameters>
            <INOP>0</INOP>
            <LED_NODE_ID>PUSH_RADIO#SIDE#_#BASE_NAME#_SEQ2</LED_NODE_ID>
        </DefaultTemplateParameters>

        <Component ID="#LED_NODE_ID#" Node="#LED_NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE type="rnp" return="number">
                    let inop = #INOP, boolean#;
                    let indicatorsPowered = #INDICATORS_POWERED, bool#;
                    let modeId = #MODE_ID, number#;
                    alias toggleSwitch = (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool);
                    alias selectedMode = (L:A32NX_RMP_#SIDE#_SELECTED_MODE, number);
                    alias navButtonPressed = (L:A32NX_RMP_#SIDE#_NAV_BUTTON_SELECTED, bool);
                    alias annunciatorLight = (L:A32NX_OVHD_INTLT_ANN, number);
                    alias dc2Powered = (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, bool);
                    let emissiveDim = if annunciatorLight == 2 { 0.05 } else { 1 };
                    (if ((!inop and toggleSwitch and ((selectedMode == modeId) or (modeId == 12 and navButtonPressed))) or ((annunciatorLight == 0) and dc2Powered)) and indicatorsPowered  {
                        1 * emissiveDim
                    } else {
                        0
                    })
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_RMP_LOAD_BUTTON_AND_LED">
        <DefaultTemplateParameters>
            <INOP>0</INOP>
            <MODE_ID>0</MODE_ID>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <NODE_ID>PUSH_RADIO#SIDE#_#BASE_NAME#</NODE_ID>
            <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
            <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
            <ANIM_NAME_BUTTON>PUSH_RADIO#SIDE#_#BASE_NAME#</ANIM_NAME_BUTTON>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.RADIO_SELECT_#BASE_NAME#</TOOLTIPID>
        </DefaultTemplateParameters>

        <!-- Button to be pressed -->
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Push_Button">
                <ANIM_NAME>#ANIM_NAME_BUTTON#</ANIM_NAME>
                <LEFT_SINGLE_CODE>(&gt;H:A32NX_RMP_#SIDE#_#BASE_NAME#_BUTTON_PRESSED)</LEFT_SINGLE_CODE>
            </UseTemplate>
        </Component>

        <!-- LED light next to button indicating if mode is available -->
        <UseTemplate Name="FBW_RMP_MODE_AVAILABLE_LED" />

        <!-- Button label backlight -->
        <UseTemplate Name="FBW_RMP_BACKLIGHT_Template" />
    </Template>

    <Template Name="FBW_RMP_MODE_AVAILABLE_LED">
        <DefaultTemplateParameters>
            <INOP>0</INOP>
            <LED_NODE_ID>PUSH_RADIO#SIDE#_#BASE_NAME#_SEQ2</LED_NODE_ID>
        </DefaultTemplateParameters>

        <Component ID="#LED_NODE_ID#" Node="#LED_NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE type="rnp" return="number">
                    let inop = #INOP, boolean#;
                    let indicatorsPowered = #INDICATORS_POWERED, bool#;
                    let modeId = #MODE_ID, number#;
                    alias toggleSwitch = (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool);
                    alias availableMode = (L:A32NX_RMP_#SIDE#_AVAILABLE_MODE, number);
                    alias annunciatorLight = (L:A32NX_OVHD_INTLT_ANN, number);
                    alias dc2Powered = (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, bool);
                    let emissiveDim = if annunciatorLight == 2 { 0.05 } else { 1 };
                    (if (!inop and toggleSwitch and (availableMode == modeId) or ((annunciatorLight == 0) and dc2Powered)) and indicatorsPowered {
                        1 * emissiveDim
                    } else {
                        0
                    })
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_RMP_BACKLIGHT_Template">
        <DefaultTemplateParameters>
            <BACKLIGHT_NAME>PUSH_RADIO#SIDE#_#BASE_NAME#_SEQ1</BACKLIGHT_NAME>
        </DefaultTemplateParameters>

        <Component ID="#BACKLIGHT_NAME#" Node="#BACKLIGHT_NAME#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>
                   (A:LIGHT POTENTIOMETER:#POTENTIOMETER#, Percent over 100) #BACKLIGHTS_POWERED# (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH) * *
                </EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>
</ModelBehaviors>
