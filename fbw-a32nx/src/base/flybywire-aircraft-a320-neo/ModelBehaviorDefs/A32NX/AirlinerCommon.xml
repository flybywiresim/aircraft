<!-- Copyright (c) 2022 FlyByWire Simulations -->
<!-- SPDX-License-Identifier: GPL-3.0 -->

<ModelBehaviors>
    <Include ModelBehaviorFile="Asobo\TRANSPONDER\Transponder.xml"/>

    <!-- Never call this template directly -->
    <Template Name="FBW_AIRLINER_SubNodes_Setter_Template">
        <DefaultTemplateParameters>
            <SEQ1_NODE_ID>#NODE_ID#_SEQ1</SEQ1_NODE_ID>
            <SEQ2_NODE_ID>#NODE_ID#_SEQ2</SEQ2_NODE_ID>
            <BLOCK_SEQ1>0</BLOCK_SEQ1>
            <BLOCK_SEQ2>0</BLOCK_SEQ2>
            <SEQ_POWERED>1</SEQ_POWERED>
            <SEQ1_POWERED>1</SEQ1_POWERED>
            <SEQ2_POWERED>1</SEQ2_POWERED>
            <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
        </DefaultTemplateParameters>
        <UseTemplate Name="#TEMPLATE_TO_CALL#">
            <Condition Check="SEQ1_EMISSIVE_CODE">
                <True>
                    <SEQ1_EMISSIVE_CODE>#SEQ1_EMISSIVE_CODE# (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or #BLOCK_SEQ1# ! and #SEQ1_POWERED# and #SEQ_POWERED# and #EMISSIVE_DIM# *</SEQ1_EMISSIVE_CODE>
                </True>
                <False>
                    <SEQ1_EMISSIVE_CODE>#BLOCK_SEQ1# ! #SEQ1_POWERED# and #SEQ_POWERED# and #EMISSIVE_DIM# *</SEQ1_EMISSIVE_CODE>
                </False>
            </Condition>
            <Condition Check="SEQ2_EMISSIVE_CODE">
                <True>
                    <SEQ2_EMISSIVE_CODE>#SEQ2_EMISSIVE_CODE# (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or #BLOCK_SEQ2# ! and #SEQ2_POWERED# and #SEQ_POWERED# and #EMISSIVE_DIM# *</SEQ2_EMISSIVE_CODE>
                </True>
                <False>
                    <SEQ2_EMISSIVE_CODE>#BLOCK_SEQ2# ! #SEQ2_POWERED# and #SEQ_POWERED# and</SEQ2_EMISSIVE_CODE>
                </False>
            </Condition>
        </UseTemplate>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Panel_Template">
        <DefaultTemplateParameters>
            <ID>1</ID>
            <VOLUME_INCREMENT>0.04</VOLUME_INCREMENT>
            <VOLUME_INCREMENT_HARD>0.01</VOLUME_INCREMENT_HARD>
            <VOLUME_INCREMENT_NAV>0.02</VOLUME_INCREMENT_NAV>
            <PREFIX>AIRLINER</PREFIX>
            <SEQ1_POWERED>(L:A32NX_ELEC_DC_ESS_BUS_IS_POWERED, Bool)</SEQ1_POWERED>
            <SEQ2_POWERED>(L:A32NX_ELEC_DC_ESS_BUS_IS_POWERED, Bool)</SEQ2_POWERED>
            <AUDIO_KNOB_POWERED>(L:A32NX_ELEC_DC_ESS_BUS_IS_POWERED, Bool)</AUDIO_KNOB_POWERED>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
        </OverrideTemplateParameters>

        <UseTemplate Name="ASOBO_GT_Helper_Suffix_ID_Appender">
            <TEMPLATE_TO_CALL>FBW_AIRLINER_Audio_Panel_SubTemplate</TEMPLATE_TO_CALL>
        </UseTemplate>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Panel_SubTemplate">
        <DefaultTemplateParameters>
            <NODE_ID_RECEIVER_VHF_L>#PREFIX#_AudioReceiver_Knob_VHF_L#SUFFIX_ID#</NODE_ID_RECEIVER_VHF_L>
            <NODE_ID_LIGHT_RECEIVER_VHF_L>#PREFIX#_AudioReceiver_Knob_VHF_L_LIGHT#SUFFIX_ID#</NODE_ID_LIGHT_RECEIVER_VHF_L>
            <ANIM_NAME_KNOB_RECEIVER_VHF_L>#PREFIX#_AudioReceiver_Knob_VHF_L#SUFFIX_ID#</ANIM_NAME_KNOB_RECEIVER_VHF_L>
            <ANIM_NAME_PUSH_RECEIVER_VHF_L>#PREFIX#_AudioReceiver_Push_VHF_L#SUFFIX_ID#</ANIM_NAME_PUSH_RECEIVER_VHF_L>
            <NODE_ID_LED_RECEIVER_VHF_L>#PREFIX#_AudioReceiver_Knob_VHF_L_LED#SUFFIX_ID#</NODE_ID_LED_RECEIVER_VHF_L>
            <NODE_ID_BUTTON_VHF_L>#PREFIX#_AudioReceiver_Push_mic_call_01#SUFFIX_ID#</NODE_ID_BUTTON_VHF_L>
            <ANIM_NAME_BUTTON_VHF_L>#PREFIX#_AudioReceiver_Push_mic_call_01#SUFFIX_ID#</ANIM_NAME_BUTTON_VHF_L>
            <NODE_ID_BUTTON_SEQ1_VHF_L>#PREFIX#_AudioReceiver_Push_mic_call_01_SEQ1#SUFFIX_ID#</NODE_ID_BUTTON_SEQ1_VHF_L>
            <NODE_ID_BUTTON_SEQ2_VHF_L>#PREFIX#_AudioReceiver_Push_mic_call_01_SEQ2#SUFFIX_ID#</NODE_ID_BUTTON_SEQ2_VHF_L>
            <NODE_ID_RECEIVER_VHF_C>#PREFIX#_AudioReceiver_Knob_VHF_C#SUFFIX_ID#</NODE_ID_RECEIVER_VHF_C>
            <NODE_ID_LIGHT_RECEIVER_VHF_C>#PREFIX#_AudioReceiver_Knob_VHF_C_LIGHT#SUFFIX_ID#</NODE_ID_LIGHT_RECEIVER_VHF_C>
            <ANIM_NAME_KNOB_RECEIVER_VHF_C>#PREFIX#_AudioReceiver_Knob_VHF_C#SUFFIX_ID#</ANIM_NAME_KNOB_RECEIVER_VHF_C>
            <ANIM_NAME_PUSH_RECEIVER_VHF_C>#PREFIX#_AudioReceiver_Push_VHF_C#SUFFIX_ID#</ANIM_NAME_PUSH_RECEIVER_VHF_C>
            <NODE_ID_LED_RECEIVER_VHF_C>#PREFIX#_AudioReceiver_Knob_VHF_C_LED#SUFFIX_ID#</NODE_ID_LED_RECEIVER_VHF_C>
            <NODE_ID_BUTTON_VHF_C>#PREFIX#_AudioReceiver_Push_mic_call_02#SUFFIX_ID#</NODE_ID_BUTTON_VHF_C>
            <ANIM_NAME_BUTTON_VHF_C>#PREFIX#_AudioReceiver_Push_mic_call_02#SUFFIX_ID#</ANIM_NAME_BUTTON_VHF_C>
            <NODE_ID_BUTTON_SEQ1_VHF_C>#PREFIX#_AudioReceiver_Push_mic_call_02_SEQ1#SUFFIX_ID#</NODE_ID_BUTTON_SEQ1_VHF_C>
            <NODE_ID_BUTTON_SEQ2_VHF_C>#PREFIX#_AudioReceiver_Push_mic_call_02_SEQ2#SUFFIX_ID#</NODE_ID_BUTTON_SEQ2_VHF_C>
            <NODE_ID_RECEIVER_VHF_R>#PREFIX#_AudioReceiver_Knob_VHF_R#SUFFIX_ID#</NODE_ID_RECEIVER_VHF_R>
            <NODE_ID_LIGHT_RECEIVER_VHF_R>#PREFIX#_AudioReceiver_Knob_VHF_R_LIGHT#SUFFIX_ID#</NODE_ID_LIGHT_RECEIVER_VHF_R>
            <ANIM_NAME_KNOB_RECEIVER_VHF_R>#PREFIX#_AudioReceiver_Knob_VHF_R#SUFFIX_ID#</ANIM_NAME_KNOB_RECEIVER_VHF_R>
            <ANIM_NAME_PUSH_RECEIVER_VHF_R>#PREFIX#_AudioReceiver_Push_VHF_R#SUFFIX_ID#</ANIM_NAME_PUSH_RECEIVER_VHF_R>
            <NODE_ID_LED_RECEIVER_VHF_R>#PREFIX#_AudioReceiver_Knob_VHF_R_LED#SUFFIX_ID#</NODE_ID_LED_RECEIVER_VHF_R>
            <NODE_ID_BUTTON_VHF_R>#PREFIX#_AudioReceiver_Push_mic_call_03#SUFFIX_ID#</NODE_ID_BUTTON_VHF_R>
            <ANIM_NAME_BUTTON_VHF_R>#PREFIX#_AudioReceiver_Push_mic_call_03#SUFFIX_ID#</ANIM_NAME_BUTTON_VHF_R>
            <NODE_ID_BUTTON_SEQ1_VHF_R>#PREFIX#_AudioReceiver_Push_mic_call_03_SEQ1#SUFFIX_ID#</NODE_ID_BUTTON_SEQ1_VHF_R>
            <NODE_ID_BUTTON_SEQ2_VHF_R>#PREFIX#_AudioReceiver_Push_mic_call_03_SEQ2#SUFFIX_ID#</NODE_ID_BUTTON_SEQ2_VHF_R>
            <NODE_ID_LED_RECEIVER_MKR>#PREFIX#_AudioReceiver_Knob_MKR_LED#SUFFIX_ID#</NODE_ID_LED_RECEIVER_MKR>
            <POTENTIOMETER_SEQ1></POTENTIOMETER_SEQ1>
            <DONT_OVERRIDE_BASE_EMISSIVE>False</DONT_OVERRIDE_BASE_EMISSIVE>
            <Condition Valid="SEQ2_POWERED">
                <True>
                    <SEQ2_EMISSIVE_CODE>#SEQ2_POWERED#</SEQ2_EMISSIVE_CODE>
                </True>
                <False>
                    <SEQ2_EMISSIVE_CODE>1</SEQ2_EMISSIVE_CODE>
                </False>
            </Condition>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_CODE_PARAM_NAME>ANIM_CODE_SWITCH</ANIM_CODE_PARAM_NAME>
            <SEQ1_EMISSIVE_DRIVES_VISIBILITY>False</SEQ1_EMISSIVE_DRIVES_VISIBILITY>
            <SEQ2_EMISSIVE_DRIVES_VISIBILITY>False</SEQ2_EMISSIVE_DRIVES_VISIBILITY>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
        </OverrideTemplateParameters>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <SEQ1_POWERED>(L:A32NX_ELEC_DC_ESS_BUS_IS_POWERED, Bool) (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool) and</SEQ1_POWERED>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_L#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_L#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_L#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_L#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_VHF_L#</NODE_ID_LED>
            <NODE_ID_BUTTON>#NODE_ID_BUTTON_VHF_L#</NODE_ID_BUTTON>
            <ANIM_NAME_BUTTON>#ANIM_NAME_BUTTON_VHF_L#</ANIM_NAME_BUTTON>
            <NODE_ID_BUTTON_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_L#</NODE_ID_BUTTON_SEQ1>
            <NODE_ID_BUTTON_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_L#</NODE_ID_BUTTON_SEQ2>
            <FREQ_ID>VHF_L</FREQ_ID>
            <TRANSMIT_ID>0</TRANSMIT_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_AUDIO_TOGGLE</TOOLTIP_HAND>
            <TOOLTIP_PB>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_L</TOOLTIP_PB>
        </UseTemplate>
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <SEQ1_POWERED>(L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool) and</SEQ1_POWERED>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_C#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_C#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_C#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_C#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_VHF_C#</NODE_ID_LED>
            <NODE_ID_BUTTON>#NODE_ID_BUTTON_VHF_C#</NODE_ID_BUTTON>
            <ANIM_NAME_BUTTON>#ANIM_NAME_BUTTON_VHF_C#</ANIM_NAME_BUTTON>
            <NODE_ID_BUTTON_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_C#</NODE_ID_BUTTON_SEQ1>
            <NODE_ID_BUTTON_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_C#</NODE_ID_BUTTON_SEQ2>
            <FREQ_ID>VHF_C</FREQ_ID>
            <TRANSMIT_ID>1</TRANSMIT_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_AUDIO_TOGGLE</TOOLTIP_HAND>
            <TOOLTIP_PB>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_C</TOOLTIP_PB>
        </UseTemplate>
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <SEQ1_POWERED>(L:A32NX_ELEC_DC_1_BUS_IS_POWERED, Bool) (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool) and</SEQ1_POWERED>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_R#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_R#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_R#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_R#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_VHF_R#</NODE_ID_LED>
            <NODE_ID_BUTTON>#NODE_ID_BUTTON_VHF_R#</NODE_ID_BUTTON>
            <ANIM_NAME_BUTTON>#ANIM_NAME_BUTTON_VHF_R#</ANIM_NAME_BUTTON>
            <NODE_ID_BUTTON_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_R#</NODE_ID_BUTTON_SEQ1>
            <NODE_ID_BUTTON_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_R#</NODE_ID_BUTTON_SEQ2>
            <FREQ_ID>VHF_R</FREQ_ID>
            <TRANSMIT_ID>2</TRANSMIT_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_AUDIO_TOGGLE</TOOLTIP_HAND>
            <TOOLTIP_PB>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_R</TOOLTIP_PB>
        </UseTemplate>

        <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <NODE_ID>#NODE_ID_RECEIVER_VOICE#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_PUSH_RECEIVER_VOICE#</ANIM_NAME>
            <SEQ1_NODE_ID>#NODE_ID_BUTTON_VOICE_SEQ1#</SEQ1_NODE_ID>
            <SEQ2_NODE_ID>#NODE_ID_BUTTON_VOICE_SEQ2#</SEQ2_NODE_ID>
            <LEFT_SINGLE_CODE>
                (L:XMLVAR_NAV_#SIDE#_VOICE_Switch_Down) ! (&gt;L:XMLVAR_NAV_#SIDE#_VOICE_Switch_Down)
                (L:XMLVAR_NAV_L_VOICE_Switch_Down) (L:XMLVAR_NAV_R_VOICE_Switch_Down) or (&gt;L:XMLVAR_NAV_VOICE_Switch_Down)

                (L:XMLVAR_NAV_VOICE_Switch_Down) 0 == if{
                    (L:XMLVAR_NAV_L_VOR1_Switch_Down) (L:XMLVAR_NAV_R_VOR1_Switch_Down) or if{
                        1 (&gt;K:RADIO_VOR1_IDENT_ENABLE)
                        1 (&gt;K:RADIO_DME1_IDENT_ENABLE)
                    }
                    (L:XMLVAR_NAV_L_VOR2_Switch_Down) (L:XMLVAR_NAV_R_VOR2_Switch_Down) or if{
                        1 (&gt;K:RADIO_VOR2_IDENT_ENABLE)
                        1 (&gt;K:RADIO_DME2_IDENT_ENABLE)
                    }

                    (L:XMLVAR_NAV_L_ADF1_Switch_Down) (L:XMLVAR_NAV_R_ADF1_Switch_Down) or if{
                        1 (&gt;K:RADIO_ADF_IDENT_ENABLE)
                    }
                    (L:XMLVAR_NAV_L_ADF2_Switch_Down) (L:XMLVAR_NAV_R_ADF2_Switch_Down) or if{
                        1 (&gt;K:RADIO_ADF2_IDENT_ENABLE)
                    }
                }

                (L:XMLVAR_NAV_VOICE_Switch_Down) 1 == if{
                    1 (&gt;K:RADIO_VOR1_IDENT_DISABLE)
                    1 (&gt;K:RADIO_VOR2_IDENT_DISABLE)
                    1 (&gt;K:RADIO_ADF_IDENT_DISABLE)
                    1 (&gt;K:RADIO_ADF2_IDENT_DISABLE)

                    1 (&gt;K:RADIO_DME1_IDENT_DISABLE)
                    1 (&gt;K:RADIO_DME2_IDENT_DISABLE)
                }
            </LEFT_SINGLE_CODE>
            <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <SEQ1_EMISSIVE_CODE>(L:XMLVAR_NAV_#SIDE#_VOICE_Switch_Down)</SEQ1_EMISSIVE_CODE>
            <TOOLTIPID>%((L:XMLVAR_NAV_#SIDE#_VOICE_Switch_Down))%{if}TT:COCKPIT.TOOLTIPS.NAV_PUSHBUTTON_VOICE_OFF%{else}TT:COCKPIT.TOOLTIPS.NAV_PUSHBUTTON_VOICE_ON%{end}</TOOLTIPID>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VOR1#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VOR1#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VOR1#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VOR1#</ANIM_NAME_SWITCH>
            <INSTRUMENT>VOR1</INSTRUMENT>
            <ONCLICK>
                <!-- Basically the same result of the second condition to reduce maintenance complexity due to RNP notation -->
                (L:XMLVAR_NAV_VOICE_Switch_Down) 0 == if{
                    (A:NAV SOUND:1, Bool) 1 == (L:XMLVAR_NAV_L_VOR1_Switch_Down) 0 == (L:XMLVAR_NAV_R_VOR1_Switch_Down) 0 == and and if{
                        1 (&gt;K:RADIO_VOR1_IDENT_TOGGLE)
                        1 (&gt;K:RADIO_DME1_IDENT_SET)
                    }

                    (A:NAV SOUND:1, Bool) 0 == (L:XMLVAR_NAV_L_VOR1_Switch_Down) 1 == (L:XMLVAR_NAV_R_VOR1_Switch_Down) 1 == or and if{
                        1 (&gt;K:RADIO_VOR1_IDENT_TOGGLE)
                        1 (&gt;K:RADIO_DME1_IDENT_SET)
                    }
                }
            </ONCLICK>
            <!--  We are unable to set the volume with a value, only inc or dec. Once the SDK let us set a value, we will be
                able to set the maximum of the two knobs straight into the KVar -->
            <INC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_VOR1_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_VOR1_Volume)
                (L:XMLVAR_NAV_#SIDE#_VOR1_Volume) (A:NAV VOLUME:1, percent over 100) &gt; if{
                   1 (&gt;K:NAV1_VOLUME_INC)
                }
            </INC_VOLUME>
            <DEC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_VOR1_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_VOR1_Volume)
                (L:XMLVAR_NAV_L_VOR1_Volume) (L:XMLVAR_NAV_R_VOR1_Volume) max (A:NAV VOLUME:1, percent over 100) &lt; if{
                   1 (&gt;K:NAV1_VOLUME_DEC)
                }
            </DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR1_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR1_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_VOR1_Switch_Down))%{if}TT:INPUT.KEY_RADIO_VOR1_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_VOR1_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VOR2#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VOR2#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VOR2#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VOR2#</ANIM_NAME_SWITCH>
            <INSTRUMENT>VOR2</INSTRUMENT>
            <ONCLICK>
                <!-- Basically the same result of the second condition to reduce maintenance complexity due to RNP notation -->
                (L:XMLVAR_NAV_VOICE_Switch_Down) 0 == if{
                    (A:NAV SOUND:2, Bool) 1 == (L:XMLVAR_NAV_L_VOR2_Switch_Down) 0 == (L:XMLVAR_NAV_R_VOR2_Switch_Down) 0 == and and if{
                        1 (&gt;K:RADIO_VOR2_IDENT_TOGGLE)
                        1 (&gt;K:RADIO_DME2_IDENT_SET)
                    }

                    (A:NAV SOUND:2, Bool) 0 == (L:XMLVAR_NAV_L_VOR2_Switch_Down) 1 == (L:XMLVAR_NAV_R_VOR2_Switch_Down) 1 == or and if{
                        1 (&gt;K:RADIO_VOR2_IDENT_TOGGLE)
                        1 (&gt;K:RADIO_DME2_IDENT_SET)
                    }
                }
            </ONCLICK>
            <!--  We are unable to set the volume with a value, only inc or dec. Once the SDK let us set a value, we will be
                able to set the maximum of the two knobs straight into the KVar -->
            <INC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_VOR2_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_VOR2_Volume)
                (L:XMLVAR_NAV_#SIDE#_VOR2_Volume) (A:NAV VOLUME:2, percent over 100) &gt; if{
                   1 (&gt;K:NAV2_VOLUME_INC)
                }
            </INC_VOLUME>
            <DEC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_VOR2_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_VOR2_Volume)
                (L:XMLVAR_NAV_L_VOR2_Volume) (L:XMLVAR_NAV_R_VOR2_Volume) max (A:NAV VOLUME:2, percent over 100) &lt; if{
                   1 (&gt;K:NAV2_VOLUME_DEC)
                }
            </DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR2_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR2_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_VOR2_Switch_Down))%{if}TT:INPUT.KEY_RADIO_VOR2_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_VOR2_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_MKR#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_MKR#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_MKR#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_MKR#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_MKR#</NODE_ID_LED>
            <INSTRUMENT>MKR</INSTRUMENT>
            <ONCLICK>
                (A:MARKER SOUND, Bool) 1 == (L:XMLVAR_NAV_L_MKR_Switch_Down) 0 == (L:XMLVAR_NAV_R_MKR_Switch_Down) 0 == and and if{
                    1 (&gt;K:MARKER_SOUND_TOGGLE)
                }

                (A:MARKER SOUND, Bool) 0 == (L:XMLVAR_NAV_L_MKR_Switch_Down) 1 == (L:XMLVAR_NAV_R_MKR_Switch_Down) 1 == or and if{
                    1 (&gt;K:MARKER_SOUND_TOGGLE)
                }
            </ONCLICK>
            <!-- Have to use a local var because marker volume is not used in the simulation yet -->
            <INC_VOLUME>(L:XMLVAR_NAV_#SIDE#_MKR_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_MKR_Volume)</INC_VOLUME>
            <DEC_VOLUME>(L:XMLVAR_NAV_#SIDE#_MKR_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_MKR_Volume)</DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_MKR_Switch_Down))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ILS#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ILS#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ILS#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ILS#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ILS#</NODE_ID_LED>
            <INSTRUMENT>ILS</INSTRUMENT>
            <ONCLICK>
                <!-- Fow now, cannot listen to NAV3 ident. We can only push the knob. See where ONCLICK is used -->
            </ONCLICK>
            <INC_VOLUME>(L:XMLVAR_NAV_#SIDE#_ILS_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_ILS_Volume)</INC_VOLUME>
            <DEC_VOLUME>(L:XMLVAR_NAV_#SIDE#_ILS_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_ILS_Volume)</DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_ILS_Switch_Down))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_MLS#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_MLS#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_MLS#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_MLS#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_MLS#</NODE_ID_LED>
            <INSTRUMENT>MLS</INSTRUMENT>
            <ONCLICK>
                <!-- Fow now, cannot listen to MLS ident. We can only push the knob. See where ONCLICK is used -->
            </ONCLICK>
            <INC_VOLUME>(L:XMLVAR_NAV_#SIDE#_MLS_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_MLS_Volume)</INC_VOLUME>
            <DEC_VOLUME>(L:XMLVAR_NAV_#SIDE#_MLS_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_MLS_Volume)</DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_MLS_Switch_Down))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ADF1#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ADF1#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ADF1#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ADF1#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ADF1#</NODE_ID_LED>
            <INSTRUMENT>ADF1</INSTRUMENT>
            <ONCLICK>
                <!-- Basically the same result of the second condition to reduce maintenance complexity due to RNP notation -->
                (L:XMLVAR_NAV_VOICE_Switch_Down) 0 == if{
                    (A:ADF SOUND, Bool) 1 == (L:XMLVAR_NAV_L_ADF1_Switch_Down) 0 == (L:XMLVAR_NAV_R_ADF1_Switch_Down) 0 == and and if{
                        1 (&gt;K:RADIO_ADF_IDENT_DISABLE)
                    }

                    (A:ADF SOUND, Bool) 0 == (L:XMLVAR_NAV_L_ADF1_Switch_Down) 1 == (L:XMLVAR_NAV_R_ADF1_Switch_Down) 1 == or and if{
                        1 (&gt;K:RADIO_ADF_IDENT_ENABLE)
                    }
                }
            </ONCLICK>
            <!--  We are unable to set the volume with a value, only inc or dec. Once the SDK let us set a value, we will be
                able to set the maximum of the two knobs straight into the KVar -->
            <INC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_ADF1_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_ADF1_Volume)
                (L:XMLVAR_NAV_#SIDE#_ADF1_Volume) (A:ADF VOLUME:1, percent over 100) &gt; if{
                   1 (&gt;K:ADF_VOLUME_INC)
                }
            </INC_VOLUME>
            <DEC_VOLUME>
                (L:XMLVAR_NAV_#SIDE#_ADF1_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_ADF1_Volume)
                (L:XMLVAR_NAV_L_ADF1_Volume) (L:XMLVAR_NAV_R_ADF1_Volume) max (A:ADF VOLUME:1, percent over 100) &lt; if{
                   1 (&gt;K:ADF_VOLUME_DEC)
                }
            </DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF1_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF1_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_ADF1_Switch_Down))%{if}TT:INPUT.KEY_RADIO_ADF_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_ADF_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ADF2#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ADF2#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ADF2#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ADF2#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ADF2#</NODE_ID_LED>
            <INSTRUMENT>ADF2</INSTRUMENT>
            <ONCLICK>
                <!-- Basically the same result of the second condition to reduce maintenance complexity due to RNP notation -->
                (L:XMLVAR_NAV_VOICE_Switch_Down) 0 == if{
                    (A:ADF SOUND:2, Bool) 1 == (L:XMLVAR_NAV_L_ADF2_Switch_Down) 0 == (L:XMLVAR_NAV_R_ADF2_Switch_Down) 0 == and and if{
                        1 (&gt;K:RADIO_ADF2_IDENT_TOGGLE)
                    }

                    (A:ADF SOUND:2, Bool) 0 == (L:XMLVAR_NAV_L_ADF2_Switch_Down) 1 == (L:XMLVAR_NAV_R_ADF2_Switch_Down) 1 == or and if{
                        1 (&gt;K:RADIO_ADF2_IDENT_TOGGLE)
                    }
                }
            </ONCLICK>
            <!-- We cannot set ADF 2 volume even though it's set to 100 by default -->
            <INC_VOLUME>(L:XMLVAR_NAV_#SIDE#_ADF2_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:XMLVAR_NAV_#SIDE#_ADF2_Volume)</INC_VOLUME>
            <DEC_VOLUME>(L:XMLVAR_NAV_#SIDE#_ADF2_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:XMLVAR_NAV_#SIDE#_ADF2_Volume)</DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF2_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF2_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:XMLVAR_NAV_#SIDE#_ADF2_Switch_Down))%{if}TT:INPUT.KEY_RADIO_ADF2_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_ADF2_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Volume_Knob_Template">
        <DefaultTemplateParameters>
            <TOOLTIP_LEFT></TOOLTIP_LEFT>
            <TOOLTIP_RIGHT></TOOLTIP_RIGHT>
            <TOOLTIP_HAND></TOOLTIP_HAND>
            <TOOLTIP_PB></TOOLTIP_PB>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_KNOB_PARAM_NAME>ANIM_CODE_SWITCH</ANIM_KNOB_PARAM_NAME>
            <AUDIO_KNOB_POWERED>1</AUDIO_KNOB_POWERED>
            <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <TRANSMIT_EMISSIVE_CODE>
                #SEQ1_POWERED# ! if{
                    0
                } els{
                    1 (L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) == (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or if{
                        3.0 #EMISSIVE_DIM# *
                    } els{
                        0.1 #EMISSIVE_DIM# *
                    }
                }
            </TRANSMIT_EMISSIVE_CODE>
        </OverrideTemplateParameters>
        <Condition Valid="NO_BUTTON">
            <False>
                <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
                    <TOOLTIPID>#TOOLTIP_PB#</TOOLTIPID>
                    <NODE_ID>#NODE_ID_BUTTON#</NODE_ID>
                    <ANIM_NAME>#ANIM_NAME_BUTTON#</ANIM_NAME>
                    <SEQ1_NODE_ID>#NODE_ID_BUTTON_SEQ1#</SEQ1_NODE_ID>
                    <SEQ2_NODE_ID>#NODE_ID_BUTTON_SEQ2#</SEQ2_NODE_ID>
                    <!-- XMLVAR_COM_PANEL2_Transmit_Channel into COPILOT_TRANSMITTER_SET because PILOT_TRANSMITTER_SET sets it for the copilot too -->
                    <LEFT_SINGLE_CODE>
                        #SEQ1_POWERED# if{
                            #TRANSMIT_ID# (L:XMLVAR_COM_PANEL#ID#_Transmit_Channel) == if{
                                4 (&gt;L:XMLVAR_COM_PANEL#ID#_Transmit_Channel)
                            } els{
                                #TRANSMIT_ID# (&gt;L:XMLVAR_COM_PANEL#ID#_Transmit_Channel)
                            }

                            #ID# 1 == if{
                                (A:PILOT TRANSMITTER TYPE, Enum) #TRANSMIT_ID# == if{
                                    4 (&gt;K:PILOT_TRANSMITTER_SET)
                                } els{
                                    #TRANSMIT_ID# (&gt;K:PILOT_TRANSMITTER_SET)
                                }
                                (L:XMLVAR_COM_PANEL2_Transmit_Channel) (&gt;K:COPILOT_TRANSMITTER_SET)
                            } els{
                                (A:COPILOT TRANSMITTER TYPE, Enum) #TRANSMIT_ID# == if{
                                    4 (&gt;K:COPILOT_TRANSMITTER_SET)
                                } els{
                                    #TRANSMIT_ID# (&gt;K:COPILOT_TRANSMITTER_SET)
                                }
                            }
                        }
                    </LEFT_SINGLE_CODE>
                    <!-- Green light -->
                    <SEQ1_EMISSIVE_CODE>
                        #SEQ1_POWERED# if{
                            #TRANSMIT_ID# (L:XMLVAR_COM_PANEL#ID#_Transmit_Channel) == (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or #EMISSIVE_DIM# *
                        }
                    </SEQ1_EMISSIVE_CODE>
                     <!-- Button name light (for example CALL or MECH)-->
                    <SEQ2_EMISSIVE_CODE>
                        #SEQ1_POWERED# if{
                            #TRANSMIT_ID# (L:XMLVAR_COM_PANEL#ID#_Transmit_Channel) == (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or #EMISSIVE_DIM# *
                        }
                    </SEQ2_EMISSIVE_CODE>
                    <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
                    <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                    <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
                    <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                </UseTemplate>
            </False>
        </Condition>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="#KNOB_TEMPLATE#">
                <ANIM_NAME>#ANIM_NAME_KNOB#</ANIM_NAME>
                <ANIMREF_ID>1</ANIMREF_ID>
                <ANIMCURSOR_MIN>0</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>1</ANIMCURSOR_MAX>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_2_ON_CURSOR>Hand</ANIMTIP_2_ON_CURSOR>
                <ANIMTIP_0>#TOOLTIP_LEFT#</ANIMTIP_0>
                <ANIMTIP_1>#TOOLTIP_RIGHT#</ANIMTIP_1>
                <ANIMTIP_2>#TOOLTIP_HAND#</ANIMTIP_2>
                <PUSH>True</PUSH>
                <USE_SIMVAR_FOR_BUTTON_ANIM>False</USE_SIMVAR_FOR_BUTTON_ANIM>
                <USE_SIMVAR_FOR_KNOB_ANIM>False</USE_SIMVAR_FOR_KNOB_ANIM>
                <CENTER_RADIUS>0.002</CENTER_RADIUS>
                <KNOB_ANIM_CODE>(L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#) 100 *</KNOB_ANIM_CODE>
                <CLOCKWISE_CODE>
                    0 (L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) == if{
                        (L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#) #VOLUME_INCREMENT_HARD# + 1 min (&gt;L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#)
                    } els{
                        (L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#) #VOLUME_INCREMENT# + 1 min (&gt;L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#)
                    }
                </CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>
                    0 (L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) == if{
                        (L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#) #VOLUME_INCREMENT_HARD# - 0 max (&gt;L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#)
                    } els{
                        (L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#) #VOLUME_INCREMENT# - 0 max (&gt;L:XMLVAR_COM_#ID#_Volume_#FREQ_ID#)
                    }
                </ANTICLOCKWISE_CODE>
                <ANIM_CODE_SWITCH>(L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) 100 *</ANIM_CODE_SWITCH>
                <ANIM_NAME_PUSH>#ANIM_NAME_SWITCH#</ANIM_NAME_PUSH>
                <LEFT_SINGLE_CODE>
                    #SEQ1_POWERED# if{
                        (L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) ! (&gt;L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down)
                        1 (&gt;I:XMLVAR_COM_UpdateReceivers)
                    }
                </LEFT_SINGLE_CODE>
                <SEQ1_EMISSIVE_CODE>
                    #SEQ1_POWERED# if{
                        1 (L:XMLVAR_COM_#ID#_#FREQ_ID#_Switch_Down) == (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or #EMISSIVE_DIM# *
                    }
                </SEQ1_EMISSIVE_CODE>
                <WWISE_EVENT></WWISE_EVENT>
                <WWISE_EVENT_1>mcdubuttons</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2>mcdubuttons</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <COUNT>36</COUNT>
            </UseTemplate>
        </Component>

        <Condition Valid="NO_LIGHT">
            <False>
                <Component ID="#NODE_ID_LIGHT#_Light" Node="#NODE_ID_LIGHT#">
                    <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                        <EMISSIVE_CODE>#TRANSMIT_EMISSIVE_CODE#</EMISSIVE_CODE>
                    </UseTemplate>
                </Component>
            </False>
        </Condition>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_NAV_Volume_Knob_Template">
        <DefaultTemplateParameters>
            <TOOLTIP_LEFT></TOOLTIP_LEFT>
            <TOOLTIP_RIGHT></TOOLTIP_RIGHT>
            <TOOLTIP_HAND></TOOLTIP_HAND>
            <TOOLTIP_PB></TOOLTIP_PB>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_KNOB_PARAM_NAME>#ANIM_CODE_SWITCH#</ANIM_KNOB_PARAM_NAME>
            <AUDIO_KNOB_POWERED>1</AUDIO_KNOB_POWERED>
            <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <TRANSMIT_EMISSIVE_CODE>
                #AUDIO_KNOB_POWERED# ! if{
                    0
                } els{
                    (L:XMLVAR_NAV_#SIDE#_#INSTRUMENT#_Switch_Down) 1 == (L:A32NX_OVHD_INTLT_ANN) 0 == (L:A32NX_ELEC_DC_2_BUS_IS_POWERED, Bool) and or if{
                        3.0 #EMISSIVE_DIM# *
                    } els{
                        0.1 #EMISSIVE_DIM# *
                    }
                }
            </TRANSMIT_EMISSIVE_CODE>
        </OverrideTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="#KNOB_TEMPLATE#">
                <ANIM_NAME>#ANIM_NAME_KNOB#</ANIM_NAME>
                <ANIMREF_ID>1</ANIMREF_ID>
                <ANIMCURSOR_MIN>0</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>1</ANIMCURSOR_MAX>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_2_ON_CURSOR>Hand</ANIMTIP_2_ON_CURSOR>
                <ANIMTIP_0>#TOOLTIP_LEFT#</ANIMTIP_0>
                <ANIMTIP_1>#TOOLTIP_RIGHT#</ANIMTIP_1>
                <ANIMTIP_2>#TOOLTIP_HAND#</ANIMTIP_2>
                <PUSH>True</PUSH>
                <USE_SIMVAR_FOR_BUTTON_ANIM>False</USE_SIMVAR_FOR_BUTTON_ANIM>
                <USE_SIMVAR_FOR_KNOB_ANIM>False</USE_SIMVAR_FOR_KNOB_ANIM>
                <CENTER_RADIUS>0.002</CENTER_RADIUS>
                <KNOB_ANIM_CODE>(L:XMLVAR_NAV_#SIDE#_#INSTRUMENT#_Volume) 100 *</KNOB_ANIM_CODE>
                <CLOCKWISE_CODE>#INC_VOLUME#</CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>#DEC_VOLUME#</ANTICLOCKWISE_CODE>
                <ANIM_CODE_SWITCH> (L:XMLVAR_NAV_#SIDE#_#INSTRUMENT#_Switch_Down) 100 *</ANIM_CODE_SWITCH>
                <ANIM_NAME_PUSH>#ANIM_NAME_SWITCH#</ANIM_NAME_PUSH>
                <LEFT_SINGLE_CODE>
                    (L:XMLVAR_NAV_#SIDE#_#INSTRUMENT#_Switch_Down) ! (&gt;L:XMLVAR_NAV_#SIDE#_#INSTRUMENT#_Switch_Down)

                    #ONCLICK#
                </LEFT_SINGLE_CODE>
                <WWISE_EVENT></WWISE_EVENT>
                <WWISE_EVENT_1>mcdubuttons</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2>mcdubuttons</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <COUNT>36</COUNT>
            </UseTemplate>
        </Component>

        <Component ID="#NODE_ID_LIGHT#_Light" Node="#NODE_ID_LIGHT#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>#TRANSMIT_EMISSIVE_CODE#</EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>




    <Template Name="FBW_AIRLINER_Audio_Panel_Updater">
        <!-- This Panel takes input from the 3 audio panels and sets the simvars to the value it should have based on it -->
        <!-- Simvar is ON if any Panel sets it to ON, Volume is the Max of the 3 panels -->

        <UseTemplate Name="ASOBO_GT_Update">
            <FREQUENCY>15</FREQUENCY>
            <UPDATE_CODE>
                <!-- NOTE TO THE NEXT DEVELOPER SEEING THIS CODE -->
                <!-- Need to add (L:XMLVAR_COM_3_VHF_L_Switch_Down) to make the overhead audio panel work in the future -->

                (I:XMLVAR_COM_UpdateReceivers) if{
                    (L:XMLVAR_COM_1_VHF_L_Switch_Down) (L:XMLVAR_COM_2_VHF_L_Switch_Down) or (&gt;K:COM1_RECEIVE_SELECT)
                    (L:XMLVAR_COM_1_VHF_C_Switch_Down) (L:XMLVAR_COM_2_VHF_C_Switch_Down) or (&gt;K:COM2_RECEIVE_SELECT)
                    (L:XMLVAR_COM_1_VHF_R_Switch_Down) (L:XMLVAR_COM_2_VHF_R_Switch_Down) or (&gt;K:COM3_RECEIVE_SELECT)
                    0 (&gt;I:XMLVAR_COM_UpdateReceivers)
                }

                (A:COM RECEIVE EX1:1, Bool) if{
                    (L:XMLVAR_COM_1_VHF_L_Switch_Down) (L:XMLVAR_COM_2_VHF_L_Switch_Down) or if{
                        (L:XMLVAR_COM_1_VHF_L_Switch_Down) (L:XMLVAR_COM_2_VHF_L_Switch_Down) and if{
                            (L:XMLVAR_COM_1_Volume_VHF_L) (L:XMLVAR_COM_2_Volume_VHF_L) max max 100 * (&gt;K:COM1_VOLUME_SET)
                        } els{
                            1 (L:XMLVAR_COM_1_VHF_L_Switch_Down) == if{
                                (L:XMLVAR_COM_1_Volume_VHF_L) 100 * (&gt;K:COM1_VOLUME_SET)
                            } els{
                                (L:XMLVAR_COM_2_Volume_VHF_L) 100 * (&gt;K:COM1_VOLUME_SET)

                            }
                        }
                    }
                } els{
                    0 (&gt;K:COM1_VOLUME_SET)
                }

                (A:COM RECEIVE EX1:2, Bool) if{
                    (L:XMLVAR_COM_1_VHF_C_Switch_Down) (L:XMLVAR_COM_2_VHF_C_Switch_Down) or if{
                        (L:XMLVAR_COM_1_VHF_C_Switch_Down) (L:XMLVAR_COM_2_VHF_C_Switch_Down) and if{
                            (L:XMLVAR_COM_1_Volume_VHF_C) (L:XMLVAR_COM_2_Volume_VHF_C) max max 100 * (&gt;K:COM2_VOLUME_SET)
                        } els{
                            1 (L:XMLVAR_COM_1_VHF_C_Switch_Down) == if{
                                (L:XMLVAR_COM_1_Volume_VHF_C) 100 * (&gt;K:COM2_VOLUME_SET)
                            } els{
                                (L:XMLVAR_COM_2_Volume_VHF_C) 100 * (&gt;K:COM2_VOLUME_SET)
                            }
                        }
                    }
                } els{
                    0 (&gt;K:COM2_VOLUME_SET)
                }

                (A:COM RECEIVE EX1:3, Bool) if{
                    (L:XMLVAR_COM_1_VHF_R_Switch_Down) (L:XMLVAR_COM_2_VHF_R_Switch_Down) or if{
                        (L:XMLVAR_COM_1_VHF_R_Switch_Down) (L:XMLVAR_COM_2_VHF_R_Switch_Down) and if{
                            (L:XMLVAR_COM_1_Volume_VHF_R) (L:XMLVAR_COM_2_Volume_VHF_R) max max 100 * (&gt;K:COM3_VOLUME_SET)
                        } els{
                            1 (L:XMLVAR_COM_1_VHF_R_Switch_Down) == if{
                                (L:XMLVAR_COM_1_Volume_VHF_R) 100 * (&gt;K:COM3_VOLUME_SET)
                            } els{
                                (L:XMLVAR_COM_2_Volume_VHF_R) 100 * (&gt;K:COM3_VOLUME_SET)
                            }
                        }
                    }
                } els{
                    0 (&gt;K:COM3_VOLUME_SET)
                }
            </UPDATE_CODE>
        </UseTemplate>
    </Template>
</ModelBehaviors>
